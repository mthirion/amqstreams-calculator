{"ast":null,"code":"\"use strict\";\n\nvar _utils = require(\"./utils\");\n\nconst defineType = (0, _utils.defineAliasedType)(\"JSX\");\ndefineType(\"JSXAttribute\", {\n  visitor: [\"name\", \"value\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    name: {\n      validate: (0, _utils.assertNodeType)(\"JSXIdentifier\", \"JSXNamespacedName\")\n    },\n    value: {\n      optional: true,\n      validate: (0, _utils.assertNodeType)(\"JSXElement\", \"JSXFragment\", \"StringLiteral\", \"JSXExpressionContainer\")\n    }\n  }\n});\ndefineType(\"JSXClosingElement\", {\n  visitor: [\"name\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    name: {\n      validate: (0, _utils.assertNodeType)(\"JSXIdentifier\", \"JSXMemberExpression\", \"JSXNamespacedName\")\n    }\n  }\n});\ndefineType(\"JSXElement\", {\n  builder: [\"openingElement\", \"closingElement\", \"children\", \"selfClosing\"],\n  visitor: [\"openingElement\", \"children\", \"closingElement\"],\n  aliases: [\"Immutable\", \"Expression\"],\n  fields: {\n    openingElement: {\n      validate: (0, _utils.assertNodeType)(\"JSXOpeningElement\")\n    },\n    closingElement: {\n      optional: true,\n      validate: (0, _utils.assertNodeType)(\"JSXClosingElement\")\n    },\n    children: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"JSXText\", \"JSXExpressionContainer\", \"JSXSpreadChild\", \"JSXElement\", \"JSXFragment\")))\n    },\n    selfClosing: {\n      validate: (0, _utils.assertValueType)(\"boolean\"),\n      optional: true\n    }\n  }\n});\ndefineType(\"JSXEmptyExpression\", {});\ndefineType(\"JSXExpressionContainer\", {\n  visitor: [\"expression\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    expression: {\n      validate: (0, _utils.assertNodeType)(\"Expression\", \"JSXEmptyExpression\")\n    }\n  }\n});\ndefineType(\"JSXSpreadChild\", {\n  visitor: [\"expression\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    expression: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  }\n});\ndefineType(\"JSXIdentifier\", {\n  builder: [\"name\"],\n  fields: {\n    name: {\n      validate: (0, _utils.assertValueType)(\"string\")\n    }\n  }\n});\ndefineType(\"JSXMemberExpression\", {\n  visitor: [\"object\", \"property\"],\n  fields: {\n    object: {\n      validate: (0, _utils.assertNodeType)(\"JSXMemberExpression\", \"JSXIdentifier\")\n    },\n    property: {\n      validate: (0, _utils.assertNodeType)(\"JSXIdentifier\")\n    }\n  }\n});\ndefineType(\"JSXNamespacedName\", {\n  visitor: [\"namespace\", \"name\"],\n  fields: {\n    namespace: {\n      validate: (0, _utils.assertNodeType)(\"JSXIdentifier\")\n    },\n    name: {\n      validate: (0, _utils.assertNodeType)(\"JSXIdentifier\")\n    }\n  }\n});\ndefineType(\"JSXOpeningElement\", {\n  builder: [\"name\", \"attributes\", \"selfClosing\"],\n  visitor: [\"name\", \"attributes\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    name: {\n      validate: (0, _utils.assertNodeType)(\"JSXIdentifier\", \"JSXMemberExpression\", \"JSXNamespacedName\")\n    },\n    selfClosing: {\n      default: false\n    },\n    attributes: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"JSXAttribute\", \"JSXSpreadAttribute\")))\n    },\n    typeParameters: {\n      validate: (0, _utils.assertNodeType)(\"TypeParameterInstantiation\", \"TSTypeParameterInstantiation\"),\n      optional: true\n    }\n  }\n});\ndefineType(\"JSXSpreadAttribute\", {\n  visitor: [\"argument\"],\n  fields: {\n    argument: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  }\n});\ndefineType(\"JSXText\", {\n  aliases: [\"Immutable\"],\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: (0, _utils.assertValueType)(\"string\")\n    }\n  }\n});\ndefineType(\"JSXFragment\", {\n  builder: [\"openingFragment\", \"closingFragment\", \"children\"],\n  visitor: [\"openingFragment\", \"children\", \"closingFragment\"],\n  aliases: [\"Immutable\", \"Expression\"],\n  fields: {\n    openingFragment: {\n      validate: (0, _utils.assertNodeType)(\"JSXOpeningFragment\")\n    },\n    closingFragment: {\n      validate: (0, _utils.assertNodeType)(\"JSXClosingFragment\")\n    },\n    children: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"JSXText\", \"JSXExpressionContainer\", \"JSXSpreadChild\", \"JSXElement\", \"JSXFragment\")))\n    }\n  }\n});\ndefineType(\"JSXOpeningFragment\", {\n  aliases: [\"Immutable\"]\n});\ndefineType(\"JSXClosingFragment\", {\n  aliases: [\"Immutable\"]\n});","map":{"version":3,"sources":["/development/workspace/internal/ui/myreact-kafka/node_modules/@babel/types/lib/definitions/jsx.js"],"names":["_utils","require","defineType","defineAliasedType","visitor","aliases","fields","name","validate","assertNodeType","value","optional","builder","openingElement","closingElement","children","chain","assertValueType","assertEach","selfClosing","expression","object","property","namespace","default","attributes","typeParameters","argument","openingFragment","closingFragment"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _utils = require(\"./utils\");\n\nconst defineType = (0, _utils.defineAliasedType)(\"JSX\");\ndefineType(\"JSXAttribute\", {\n  visitor: [\"name\", \"value\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    name: {\n      validate: (0, _utils.assertNodeType)(\"JSXIdentifier\", \"JSXNamespacedName\")\n    },\n    value: {\n      optional: true,\n      validate: (0, _utils.assertNodeType)(\"JSXElement\", \"JSXFragment\", \"StringLiteral\", \"JSXExpressionContainer\")\n    }\n  }\n});\ndefineType(\"JSXClosingElement\", {\n  visitor: [\"name\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    name: {\n      validate: (0, _utils.assertNodeType)(\"JSXIdentifier\", \"JSXMemberExpression\", \"JSXNamespacedName\")\n    }\n  }\n});\ndefineType(\"JSXElement\", {\n  builder: [\"openingElement\", \"closingElement\", \"children\", \"selfClosing\"],\n  visitor: [\"openingElement\", \"children\", \"closingElement\"],\n  aliases: [\"Immutable\", \"Expression\"],\n  fields: {\n    openingElement: {\n      validate: (0, _utils.assertNodeType)(\"JSXOpeningElement\")\n    },\n    closingElement: {\n      optional: true,\n      validate: (0, _utils.assertNodeType)(\"JSXClosingElement\")\n    },\n    children: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"JSXText\", \"JSXExpressionContainer\", \"JSXSpreadChild\", \"JSXElement\", \"JSXFragment\")))\n    },\n    selfClosing: {\n      validate: (0, _utils.assertValueType)(\"boolean\"),\n      optional: true\n    }\n  }\n});\ndefineType(\"JSXEmptyExpression\", {});\ndefineType(\"JSXExpressionContainer\", {\n  visitor: [\"expression\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    expression: {\n      validate: (0, _utils.assertNodeType)(\"Expression\", \"JSXEmptyExpression\")\n    }\n  }\n});\ndefineType(\"JSXSpreadChild\", {\n  visitor: [\"expression\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    expression: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  }\n});\ndefineType(\"JSXIdentifier\", {\n  builder: [\"name\"],\n  fields: {\n    name: {\n      validate: (0, _utils.assertValueType)(\"string\")\n    }\n  }\n});\ndefineType(\"JSXMemberExpression\", {\n  visitor: [\"object\", \"property\"],\n  fields: {\n    object: {\n      validate: (0, _utils.assertNodeType)(\"JSXMemberExpression\", \"JSXIdentifier\")\n    },\n    property: {\n      validate: (0, _utils.assertNodeType)(\"JSXIdentifier\")\n    }\n  }\n});\ndefineType(\"JSXNamespacedName\", {\n  visitor: [\"namespace\", \"name\"],\n  fields: {\n    namespace: {\n      validate: (0, _utils.assertNodeType)(\"JSXIdentifier\")\n    },\n    name: {\n      validate: (0, _utils.assertNodeType)(\"JSXIdentifier\")\n    }\n  }\n});\ndefineType(\"JSXOpeningElement\", {\n  builder: [\"name\", \"attributes\", \"selfClosing\"],\n  visitor: [\"name\", \"attributes\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    name: {\n      validate: (0, _utils.assertNodeType)(\"JSXIdentifier\", \"JSXMemberExpression\", \"JSXNamespacedName\")\n    },\n    selfClosing: {\n      default: false\n    },\n    attributes: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"JSXAttribute\", \"JSXSpreadAttribute\")))\n    },\n    typeParameters: {\n      validate: (0, _utils.assertNodeType)(\"TypeParameterInstantiation\", \"TSTypeParameterInstantiation\"),\n      optional: true\n    }\n  }\n});\ndefineType(\"JSXSpreadAttribute\", {\n  visitor: [\"argument\"],\n  fields: {\n    argument: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  }\n});\ndefineType(\"JSXText\", {\n  aliases: [\"Immutable\"],\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: (0, _utils.assertValueType)(\"string\")\n    }\n  }\n});\ndefineType(\"JSXFragment\", {\n  builder: [\"openingFragment\", \"closingFragment\", \"children\"],\n  visitor: [\"openingFragment\", \"children\", \"closingFragment\"],\n  aliases: [\"Immutable\", \"Expression\"],\n  fields: {\n    openingFragment: {\n      validate: (0, _utils.assertNodeType)(\"JSXOpeningFragment\")\n    },\n    closingFragment: {\n      validate: (0, _utils.assertNodeType)(\"JSXClosingFragment\")\n    },\n    children: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"JSXText\", \"JSXExpressionContainer\", \"JSXSpreadChild\", \"JSXElement\", \"JSXFragment\")))\n    }\n  }\n});\ndefineType(\"JSXOpeningFragment\", {\n  aliases: [\"Immutable\"]\n});\ndefineType(\"JSXClosingFragment\", {\n  aliases: [\"Immutable\"]\n});"]},"metadata":{},"sourceType":"script"}