{"ast":null,"code":"var _jsxFileName = \"/development/workspace/internal/ui/myreact-kafka/src/CalcForm.js\";\nimport './CalcForm.css';\nimport React, { Component, useState, useEffect, setState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CalcForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onThroughputSelectChange = e => {\n      const {\n        name,\n        value\n      } = e.target;\n      this.setState({\n        [name]: value\n      }); // we need to adject the 'checked' value of th radio button for the next rendering\n\n      if (e.target.value === \"thru\") {\n        this.state.throuhputdefault = true;\n        this.state.displayDisableThroughputBox = false;\n        this.state.DisplayMessagesRateAreHidden = true;\n      } else {\n        this.state.throuhputdefault = false;\n        this.state.displayDisableThroughputBox = true;\n        this.state.DisplayMessagesRateAreHidden = false;\n      }\n    };\n\n    this.displayComputedThroughput = e => {\n      const {\n        name,\n        value\n      } = e.target;\n      this.setState({\n        [name]: value\n      });\n\n      switch (e.target.name) {\n        case \"nbmessages\":\n          this.state.nbmessages = e.target.value;\n          break;\n\n        case \"messagesize\":\n          this.state.messagesize = e.target.value;\n          break;\n\n        case \"msg-time-unit\":\n          if (e.target.value == \"sec\") //TODO: hour, day\n            this.state.msgtimeunit = 1;\n          if (e.target.value == \"min\") //TODO: hour, day\n            this.state.msgtimeunit = 60;\n          break;\n\n        case \"msg-size-unit\":\n          if (e.target.value == \"bytes\") //TODO: ?\n            this.state.msgsizeunit = 1 / 1000000;\n          if (e.target.value == \"kbytes\") //TODO: ?\n            this.state.msgsizeunit = 1 / 1000;\n          break;\n\n        default:\n          break;\n      }\n\n      ;\n      this.state.req_inthroughput = this.state.nbmessages * this.state.msgtimeunit * this.state.messagesize * this.state.msgsizeunit;\n    };\n\n    this.callKafkaCalculator = () => {\n      fetch('http://localhost:8090/api/kafkasizing', {\n        method: 'POST',\n        body: JSON.stringify({\n          inbound_throughput: this.state.req_inthroughput,\n          replicas: this.state.req_replicas,\n          netspeed: this.state.req_netspeed,\n          netpercent: this.state.req_netpercent,\n          diskspeed: this.state.req_diskspeed,\n          diskpercent: this.state.req_diskpercent,\n          consumers: this.state.req_consumers\n        }),\n        headers: {\n          'Content-type': 'application/json; charset=UTF-8'\n        }\n      }).then(response => response.json()).then(data => {\n        console.log(data);\n        console.log(data.topicDesc.consumers); //setPosts((posts) => [data, ...posts]);\n        //setTitle('');\n        //setBody('');\n      }).catch(err => {\n        console.log(err.message);\n      });\n    };\n\n    this.state = {};\n    this.initDisplayStates();\n    this.initRequestStates();\n    this.initResponseStates();\n  }\n\n  initDisplayStates() {\n    this.state.throuhputdefault = true;\n    this.state.msgtimeunit = 1; // default = second\n\n    this.state.msgsizeunit = 1 / 1000; // default = kilobytes\n\n    this.state.nbmessages = 0;\n    this.state.messagesize = 0;\n    this.state.displayDisableThroughputBox = false;\n    this.state.DisplayMessagesRateAreHidden = true;\n  }\n\n  initRequestStates() {\n    this.state.req_inthroughput = 0;\n    this.state.req_replicas = 3;\n    this.state.req_netspeed = 10;\n    this.state.req_netpercent = 80;\n    this.state.req_diskspeed = 400;\n    this.state.req_diskpercent = 80;\n    this.state.req_consumers = 5;\n  }\n\n  initResponseStates() {\n    this.state.resp_inthroughput = 0;\n    this.state.resp_replicas = 3;\n    this.state.resp_netspeed = 10;\n    this.state.resp_netpercent = 80;\n    this.state.resp_diskspeed = 400;\n    this.state.resp_diskpercent = 80;\n    this.state.resp_consumers = 5;\n  }\n\n  componentDidMount() {}\n  /** \n     render() is the main method of the component\n     it is where the page html is displayed\n     with the binding to the functions that will react to page events\n  */\n\n\n  render() {\n    // some logic can be added here to compute dynamic value before the return method is called\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title\",\n        children: \"Red Hat AMQStreams sizing\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n        class: \"throughput\",\n        children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n          children: \"Inbound throughput parameter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          id: \"throughput-msg\",\n          name: \"throughput\",\n          value: \"msgsec\",\n          onClick: this.onThroughputSelectChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          for: \"throughput-msg\",\n          children: \"message based\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 70\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          id: \"throughput-absolute\",\n          name: \"throughput\",\n          value: \"thru\",\n          checked: this.state.throuhputdefault,\n          onClick: this.onThroughputSelectChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          for: \"throughput-absolute\",\n          children: \" absolute value\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 77\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"align-absthroughput\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              for: \"inboundrate\",\n              children: \"Throughput\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 30\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              class: \"t-in3\",\n              type: \"text\",\n              value: this.state.req_inthroughput,\n              name: \"inboundrate\",\n              id: \"inrate\",\n              disabled: this.state.displayDisableThroughputBox\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 30\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              class: \"t-in\",\n              children: \"MB/sec\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 30\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 26\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"align-custthroughput\",\n          hidden: this.state.DisplayMessagesRateAreHidden,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              for: \"nbmessages\",\n              children: \"Number of messages\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 30\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              class: \"t-in2\",\n              type: \"text\",\n              value: this.state.nbmessages,\n              name: \"nbmessages\",\n              id: \"nbmessages\",\n              onInput: this.displayComputedThroughput\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 31\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              class: \"t-in\",\n              name: \"msg-time-unit\",\n              id: \"msg-time-unit\",\n              onChange: this.displayComputedThroughput,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"sec\",\n                children: \"msg/sec\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"min\",\n                children: \"msg/min\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 31\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              for: \"messagesize\",\n              children: \"Average message size\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 30\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              class: \"t-in\",\n              type: \"text\",\n              value: this.state.messagesize,\n              name: \"messagesize\",\n              id: \"messagesize\",\n              onInput: this.displayComputedThroughput\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 31\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              class: \"t-in\",\n              name: \"msg-size-unit\",\n              defaultValue: \"kbytes\",\n              id: \"msg-size-unit\",\n              onChange: this.displayComputedThroughput,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"bytes\",\n                children: \"bytes\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 31\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"kbytes\",\n                children: \"KB\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 101,\n                columnNumber: 31\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 31\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 26\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 31\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n        class: \"network\",\n        children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n          children: \"Inbound throughput parameter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          for: \"netspeed\",\n          children: \"Network Adapter Capabilities\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"align-net\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              id: \"net-speed-1\",\n              name: \"netspeed\",\n              value: \"1\",\n              onClick: this.onNetSelectChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              for: \"net-speed-1\",\n              children: \"1 Gbps\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 68\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              id: \"net-peed-10\",\n              name: \"netspeed\",\n              value: \"10\",\n              checked: this.state.netdefault,\n              onClick: this.onNetSelectChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 26\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              for: \"throughput-net-speed-10\",\n              children: \"10 Gbps\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 26\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 78\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"replicas\",\n        children: \"Number of Replicas:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 66\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"replicas\",\n        id: \"replicas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 68\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"replicas\",\n        class: \"small\",\n        children: \"Replicas are used for redundancy. It affects the amount of storage as well as the performance of your Kafka cluster\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 62\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 69\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"netSpeed\",\n        children: \"Network Adapter Speed (Gbps):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 76\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"netSpeed\",\n        id: \"netSpeed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 68\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"netSpeed\",\n        class: \"small\",\n        children: \"The network adapter is assumed to be working in full-duplex mode. Standard Gigabit network adapter is 1 Gbps. It is likely that either the network adapter speed (or the max. disk throughput) is going to be the bottleneck of your system. You may want to use a higher speed network adapter if that is the case.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 100\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 107\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"diskThroughput\",\n        children: \"Max. Disk Throughput (MB/s):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 81\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"diskThroughput\",\n        id: \"diskThroughput\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 80\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"diskThroughput\",\n        class: \"small\",\n        children: \"For hard disks, it is around 125 MB/s. For SSDs, it could be 400MB/s or higher.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 146\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 153\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"maxUtil\",\n        children: \"Max. Utilisation Allowed for Network Adapter and Disk Subsystem (between 0.01 and 1.00):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 134\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"maxUtil\",\n        id: \"maxUtil\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 65\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"maxUtil\",\n        class: \"small\",\n        children: \"You do not want to have your network adapter and disk system running at 100% as this may impact the performance of the system during a sudden temporary surge in message rate.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 103\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 110\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"consumerGroups\",\n        children: \"Number of Consumer Groups:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 79\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"consumerGroups\",\n        id: \"consumerGroups\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 80\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"consumerGroups\",\n        class: \"small\",\n        children: \"A consumer group is a group of related consumers that perform a task, like sending messages to a service. Different consumer groups can read from different offsets in a partition.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 113\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 120\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"laggingConsumers\",\n        children: \"Number of Lagging Consumers:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 83\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"laggingConsumers\",\n        id: \"laggingConsumers\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 83\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"laggingConsumers\",\n        class: \"small\",\n        children: \"Caching of data reduces the need to read data from disk when readers (consumers in consumer groups) read data. However, the size of the cache is finite. When a slow reader tries to read the data, the data may have already been evicted from the cache necessitating a disk read which impacts performance. The more lagging consumers, the more impact on performance.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            for: \"laggingConsumers\",\n            class: \"small\",\n            children: \"0 is the best case scenario. 0 means that there are no lagging readers ie, all data are in the cache and the reads do not incur the penalty of reading from disk.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 26\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            for: \"laggingConsumers\",\n            class: \"small\",\n            children: \"num Consumer Groups + (num Replicas - 1) is the worst case scenario. This implies that all reads from readers of the consumer groups as well as the followers trying to read the data from the leader to store them on their local disk incur the penalty of reading from disk.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 24\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"retentionPariod\",\n        children: \"Data Retention Period (number of days):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 93\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"retentionPariod\",\n        id: \"retentionPariod\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 81\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"retentionPariod\",\n        class: \"small\",\n        children: \"This parameter is used to estimate the total storage required for the solution.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 147\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 154\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"zkFailures\",\n        children: \"Number of Zookeeper Node Failures that can be Tolerated (1 or 2):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 114\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"zkFailures\",\n        id: \"zkFailures\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 71\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"zkFailures\",\n        class: \"small\",\n        children: \"A Zookeeper cluster keeps track of status of the Kafka cluster nodes and Kafka topics, partitions etc. The number of Zookeeper nodes is always an odd number: 3, 5, 7, etc. This parameter determines the size of your Zookeeper cluster.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 32\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Partition Parameters\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        class: \"bolder\",\n        children: \"The following are optional parameters for estimating the minimum number of partitions required for a topic. This estimation will be skipped if any of the following fields are left at zero (0).\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"topicThroughput\",\n        children: \"Target Throughput of a Topic (MB/s):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 90\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"topicThroughput\",\n        id: \"topicThroughput\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 82\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"topicThroughput\",\n        class: \"small\",\n        children: \"This parameter specifies the target throughput for a topic.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 32\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"producerThroughput\",\n        children: \"Throughput of the Slowest Producer (MB/s):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 99\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"producerThroughput\",\n        id: \"producerThroughput\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 87\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"producerThroughput\",\n        class: \"small\",\n        children: \"This parameter is used to estimate the minimum number of partitions needed for producers to produce the target message throughput.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 32\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"consumerThroughput\",\n        children: \"Throughput of the Slowest Consumer (MB/s):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 99\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"consumerThroughput\",\n        id: \"consumerThroughput\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 87\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"consumerThroughput\",\n        class: \"small\",\n        children: \"This parameter is used to estimate the minimum number of partitions needed for consumers to consume at the target message throughput.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        onClick: this.callKafkaCalculator,\n        children: \"Compute size\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this);\n  } // this function is linked to the radio buttons stored in the div of class throughput\n  // in the memory (setState, which is initialized in the constructor), we store the name and the value\n  // the name is the name of the radio button, and the value is the value of the radio button from the radio button definition\n  // the event.target contains both.  it's also possible to use e.target.name ; e.target.value\n  // the re-rendering is automated  \n\n\n}\n\nexport default CalcForm;","map":{"version":3,"sources":["/development/workspace/internal/ui/myreact-kafka/src/CalcForm.js"],"names":["React","Component","useState","useEffect","setState","CalcForm","constructor","props","onThroughputSelectChange","e","name","value","target","state","throuhputdefault","displayDisableThroughputBox","DisplayMessagesRateAreHidden","displayComputedThroughput","nbmessages","messagesize","msgtimeunit","msgsizeunit","req_inthroughput","callKafkaCalculator","fetch","method","body","JSON","stringify","inbound_throughput","replicas","req_replicas","netspeed","req_netspeed","netpercent","req_netpercent","diskspeed","req_diskspeed","diskpercent","req_diskpercent","consumers","req_consumers","headers","then","response","json","data","console","log","topicDesc","catch","err","message","initDisplayStates","initRequestStates","initResponseStates","resp_inthroughput","resp_replicas","resp_netspeed","resp_netpercent","resp_diskspeed","resp_diskpercent","resp_consumers","componentDidMount","render","onNetSelectChange","netdefault"],"mappings":"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","sourcesContent":["import './CalcForm.css';\n\nimport React, { Component, useState, useEffect, setState  } from 'react';\n\nclass CalcForm extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {}\n\n    this.initDisplayStates();\n    this.initRequestStates();\n    this.initResponseStates();\n  }\n\n  initDisplayStates() {\n    this.state.throuhputdefault=true;\n\n    this.state.msgtimeunit=1;       // default = second\n    this.state.msgsizeunit=1/1000;    // default = kilobytes\n\n    this.state.nbmessages=0;\n    this.state.messagesize=0;\n\n    this.state.displayDisableThroughputBox=false;\n    this.state.DisplayMessagesRateAreHidden=true;\n  }\n\n  initRequestStates() {\n    this.state.req_inthroughput=0;\n    this.state.req_replicas=3;\n    this.state.req_netspeed=10;\n    this.state.req_netpercent=80;\n    this.state.req_diskspeed=400;\n    this.state.req_diskpercent=80;\n    this.state.req_consumers=5;\n  }\n\n  initResponseStates() {\n    this.state.resp_inthroughput=0;\n    this.state.resp_replicas=3;\n    this.state.resp_netspeed=10;\n    this.state.resp_netpercent=80;\n    this.state.resp_diskspeed=400;\n    this.state.resp_diskpercent=80;\n    this.state.resp_consumers=5;\n  }  \n\n  componentDidMount() {\n    \n  }\n\n\n  /** \n     render() is the main method of the component\n     it is where the page html is displayed\n     with the binding to the functions that will react to page events\n  */\n  render() {\n\n    // some logic can be added here to compute dynamic value before the return method is called\n\n    \n    return (\n\n        <div className=\"container\">\n          <h1 className=\"title\">Red Hat AMQStreams sizing</h1>\n\n\n                <fieldset class=\"throughput\">\n                    <legend>Inbound throughput parameter</legend>\n\n                    {/* Throughput as absolute or based on messages rate radio button box */}\n                    <input type=\"radio\" id=\"throughput-msg\" name=\"throughput\" value=\"msgsec\" onClick={this.onThroughputSelectChange}/>\n                    <label for=\"throughput-msg\">message based</label><br/>\n                    <input type=\"radio\" id=\"throughput-absolute\" name=\"throughput\" value=\"thru\" checked={this.state.throuhputdefault} onClick={this.onThroughputSelectChange}/>\n                    <label for=\"throughput-absolute\"> absolute value</label><br/>\n                \n                    {/* Throughput box */}\n                    <div class=\"align-absthroughput\"> \n                        <div><label for=\"inboundrate\">Throughput</label>\n                             <input class=\"t-in3\" type=\"text\"  value={this.state.req_inthroughput} name=\"inboundrate\" id=\"inrate\" disabled={this.state.displayDisableThroughputBox}/> \n                             <label class=\"t-in\">MB/sec</label> \n                        </div>\n                    </div> \n                    <br/><br/>\n                    {/* message rate box (when selected by radio button)*/}\n                    <div class=\"align-custthroughput\" hidden={this.state.DisplayMessagesRateAreHidden}> \n                        <div><label for=\"nbmessages\">Number of messages</label> \n                              <input class=\"t-in2\" type=\"text\" value={this.state.nbmessages} name=\"nbmessages\" id=\"nbmessages\" onInput={this.displayComputedThroughput} /> \n                              <select class=\"t-in\" name=\"msg-time-unit\" id=\"msg-time-unit\" onChange={this.displayComputedThroughput}> \n                                <option value=\"sec\">msg/sec</option> \n                                <option value=\"min\">msg/min</option> \n                              </select> \n                        </div> \n                        \n                        <div><label for=\"messagesize\">Average message size</label> \n                              <input class=\"t-in\" type=\"text\" value={this.state.messagesize} name=\"messagesize\" id=\"messagesize\" onInput={this.displayComputedThroughput} /> \n                              <select class=\"t-in\" name=\"msg-size-unit\" defaultValue=\"kbytes\" id=\"msg-size-unit\" onChange={this.displayComputedThroughput}> \n                              <option value=\"bytes\">bytes</option> \n                              <option value=\"kbytes\">KB</option> \n                            </select> \n                        </div> \n                    </div> \n                    <br/><br/><br/>                \n                </fieldset>\n                <br/>\n        \n        \n\n                <fieldset class=\"network\">\n                    <legend>Inbound throughput parameter</legend>\n                    <label for=\"netspeed\">Network Adapter Capabilities</label> \n                    <div class=\"align-net\">\n                        <div>\n                            <input type=\"radio\" id=\"net-speed-1\" name=\"netspeed\" value=\"1\" onClick={this.onNetSelectChange}/>\n                            <label for=\"net-speed-1\">1 Gbps</label><br/>\n                        </div>\n                        <div>\n                         <input type=\"radio\" id=\"net-peed-10\" name=\"netspeed\" value=\"10\" checked={this.state.netdefault} onClick={this.onNetSelectChange}/>\n                         <label for=\"throughput-net-speed-10\">10 Gbps</label><br/>\n                         </div>\n                    </div>\n                </fieldset>\n\n\n                <label for=\"replicas\">Number of Replicas:</label><br/>\n                <input type=\"text\" name=\"replicas\" id=\"replicas\" /><br/>\n                \n                <label for=\"replicas\" class=\"small\">Replicas are used for redundancy. It affects the amount of storage as well as \n                the performance of your Kafka cluster</label><p></p><br/>        \n        \n                <label for=\"netSpeed\">Network Adapter Speed (Gbps):</label><br/>\n                <input type=\"text\" name=\"netSpeed\" id=\"netSpeed\" /><br/>\n                \n                <label for=\"netSpeed\" class=\"small\">The network adapter is assumed to be working in full-duplex mode. Standard Gigabit network adapter is 1 Gbps. \n                    It is likely that either the network adapter speed (or the max. disk throughput) is going to be the bottleneck of your system. \n                    You may want to use a higher speed network adapter if that is the case.</label><p></p><br/>        \n        \n                <label for=\"diskThroughput\">Max. Disk Throughput (MB/s):</label><br/>\n                <input type=\"text\" name=\"diskThroughput\" id=\"diskThroughput\" /><br/>\n                \n                <label for=\"diskThroughput\" class=\"small\">For hard disks, it is around 125 MB/s. For SSDs, it could be 400MB/s or higher.</label><p></p><br/>        \n        \n                <label for=\"maxUtil\">Max. Utilisation Allowed for Network Adapter and Disk Subsystem (between 0.01 and 1.00):</label><br/>\n                <input type=\"text\" name=\"maxUtil\" id=\"maxUtil\"/><br/>\n                \n                <label for=\"maxUtil\" class=\"small\">You do not want to have your network adapter and disk system running at 100% as this may impact the \n                    performance of the system during a sudden temporary surge in message rate.</label><p></p><br/>        \n        \n                <label for=\"consumerGroups\">Number of Consumer Groups:</label><br/>\n                <input type=\"text\" name=\"consumerGroups\" id=\"consumerGroups\" /><br/>\n                \n                <label for=\"consumerGroups\" class=\"small\">A consumer group is a group of related consumers that perform a task, like sending messages to \n                    a service. Different consumer groups can read from different offsets in a partition.</label><p></p><br/>        \n        \n                <label for=\"laggingConsumers\">Number of Lagging Consumers:</label><br/>\n                <input type=\"text\" name=\"laggingConsumers\" id=\"laggingConsumers\"/><br/>\n                \n                <label for=\"laggingConsumers\" class=\"small\">Caching of data reduces the need to read data from disk when readers (consumers in consumer groups) \n                    read data. However, the size of the cache is finite. When a slow reader tries to read the data, the data may have already been \n                    evicted from the cache necessitating a disk read which impacts performance. The more lagging consumers, the more impact on performance.\n                </label>\n                <ul>\n                    <li>\n                        <label for=\"laggingConsumers\" class=\"small\">0 is the best case scenario. 0 means that there are no lagging readers ie, \n                            all data are in the cache and the reads do not incur the penalty of reading from disk.\n                        </label>\n                    </li><br/>\n                    <li>\n                        <label for=\"laggingConsumers\" class=\"small\">num Consumer Groups + (num Replicas - 1) is the worst case scenario.\n                            This implies that all reads from readers of the consumer groups as well as the followers trying to read the data from the leader \n                            to store them on their local disk incur the penalty of reading from disk.\n                        </label>\n                    </li>\n                </ul>\n                <p></p><br/>        \n        \n                <label for=\"retentionPariod\">Data Retention Period (number of days):</label><br/>\n                <input type=\"text\" name=\"retentionPariod\" id=\"retentionPariod\"/><br/>\n                \n                <label for=\"retentionPariod\" class=\"small\">This parameter is used to estimate the total storage required for the solution.</label><p></p><br/>        \n                \n        \n                <label for=\"zkFailures\">Number of Zookeeper Node Failures that can be Tolerated (1 or 2):</label><br/>\n                <input type=\"text\" name=\"zkFailures\" id=\"zkFailures\"/><br/>\n                \n                <label for=\"zkFailures\" class=\"small\">A Zookeeper cluster keeps track of status of the Kafka cluster nodes and Kafka topics, \n                    partitions etc. The number of Zookeeper nodes is always an odd number: 3, 5, 7, etc. This parameter determines the size of your \n                    Zookeeper cluster.\n                </label><p></p><hr/>\n                \n                <h2>Partition Parameters</h2>\n                <p class=\"bolder\">The following are optional parameters for estimating the minimum number of partitions required for a topic. This estimation will\n                be skipped if any of the following fields are left at zero (0).\n                </p>\n                <p></p>\n                \n                <label for=\"topicThroughput\">Target Throughput of a Topic (MB/s):</label><br/>\n                <input type=\"text\" name=\"topicThroughput\" id=\"topicThroughput\" /><br/>\n                \n                <label for=\"topicThroughput\" class=\"small\"> \n                    This parameter specifies the target throughput for a topic.  \n                </label><p></p><br/>      \n        \n                <label for=\"producerThroughput\">Throughput of the Slowest Producer (MB/s):</label><br/>\n                <input type=\"text\" name=\"producerThroughput\" id=\"producerThroughput\"/><br/>\n                \n                <label for=\"producerThroughput\" class=\"small\"> \n                    This parameter is used to estimate the minimum number of partitions needed for producers to produce the target message throughput.\n                </label><p></p><br/>        \n        \n                <label for=\"consumerThroughput\">Throughput of the Slowest Consumer (MB/s):</label><br/>\n                <input type=\"text\" name=\"consumerThroughput\" id=\"consumerThroughput\"/><br/>\n                \n                <label for=\"consumerThroughput\" class=\"small\">This parameter is used to estimate the minimum number of partitions needed for consumers to\n                consume at the target message throughput.\n                </label><p></p>\n                <hr/>        \n        \n                <button type=\"submit\" onClick={this.callKafkaCalculator}>Compute size</button>\n            \n        </div>\n      );\n  }\n\n\n  // this function is linked to the radio buttons stored in the div of class throughput\n  // in the memory (setState, which is initialized in the constructor), we store the name and the value\n  // the name is the name of the radio button, and the value is the value of the radio button from the radio button definition\n  // the event.target contains both.  it's also possible to use e.target.name ; e.target.value\n  // the re-rendering is automated  \n  onThroughputSelectChange = (e) => {\n    \n    const { name, value } = e.target;\n\n    this.setState({\n      [name]: value\n    });\n\n    // we need to adject the 'checked' value of th radio button for the next rendering\n    if (e.target.value===\"thru\") {\n        this.state.throuhputdefault=true;\n        this.state.displayDisableThroughputBox=false;\n        this.state.DisplayMessagesRateAreHidden=true;\n    }\n    else {\n        this.state.throuhputdefault=false;\n        this.state.displayDisableThroughputBox=true;\n        this.state.DisplayMessagesRateAreHidden=false;\n    }\n\n\n  } ; \n\n\n  displayComputedThroughput = (e) => {    \n    \n    const { name, value } = e.target;\n    this.setState({\n      [name]: value\n    });  \n\n    switch (e.target.name) {\n        case \"nbmessages\": \n            this.state.nbmessages = e.target.value;\n            break;\n        case \"messagesize\":\n            this.state.messagesize = e.target.value;\n            break;\n        case \"msg-time-unit\": \n            if (e.target.value==\"sec\")  //TODO: hour, day\n                this.state.msgtimeunit = 1;      \n            if (e.target.value==\"min\")  //TODO: hour, day\n                this.state.msgtimeunit = 60;\n            break;\n        case \"msg-size-unit\": \n            if (e.target.value==\"bytes\")  //TODO: ?\n                this.state.msgsizeunit = 1/1000000;\n            if (e.target.value==\"kbytes\")  //TODO: ?\n                this.state.msgsizeunit = 1/1000;  \n            break;\n        default: break;\n    };\n    \n    this.state.req_inthroughput = this.state.nbmessages * this.state.msgtimeunit * this.state.messagesize * this.state.msgsizeunit;\n  };    \n\n\n  callKafkaCalculator = () => {\n\n    fetch('http://localhost:8090/api/kafkasizing', {\n      method: 'POST',\n      body: JSON.stringify({\n        inbound_throughput: this.state.req_inthroughput,\n        replicas: this.state.req_replicas,\n        netspeed: this.state.req_netspeed,\n        netpercent: this.state.req_netpercent,\n        diskspeed: this.state.req_diskspeed,\n        diskpercent: this.state.req_diskpercent,\n        consumers: this.state.req_consumers\n      }),\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8',\n      },\n      })\n      .then((response) => response.json())\n      .then((data) => {\n          console.log(data);\n          console.log(data.topicDesc.consumers);\n\n        //setPosts((posts) => [data, ...posts]);\n        //setTitle('');\n        //setBody('');\n      })\n      .catch((err) => {\n        console.log(err.message);\n      });\n  }    \n} \n\nexport default CalcForm;"]},"metadata":{},"sourceType":"module"}