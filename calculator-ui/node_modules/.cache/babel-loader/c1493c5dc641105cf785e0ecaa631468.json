{"ast":null,"code":"\"use strict\";\n\nvar _utils = require(\"./utils\");\n\n(0, _utils.default)(\"ArgumentPlaceholder\", {});\n(0, _utils.default)(\"BindExpression\", {\n  visitor: [\"object\", \"callee\"],\n  aliases: [\"Expression\"],\n  fields: !process.env.BABEL_TYPES_8_BREAKING ? {\n    object: {\n      validate: Object.assign(() => {}, {\n        oneOfNodeTypes: [\"Expression\"]\n      })\n    },\n    callee: {\n      validate: Object.assign(() => {}, {\n        oneOfNodeTypes: [\"Expression\"]\n      })\n    }\n  } : {\n    object: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    },\n    callee: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  }\n});\n(0, _utils.default)(\"ImportAttribute\", {\n  visitor: [\"key\", \"value\"],\n  fields: {\n    key: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\", \"StringLiteral\")\n    },\n    value: {\n      validate: (0, _utils.assertNodeType)(\"StringLiteral\")\n    }\n  }\n});\n(0, _utils.default)(\"Decorator\", {\n  visitor: [\"expression\"],\n  fields: {\n    expression: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  }\n});\n(0, _utils.default)(\"DoExpression\", {\n  visitor: [\"body\"],\n  builder: [\"body\", \"async\"],\n  aliases: [\"Expression\"],\n  fields: {\n    body: {\n      validate: (0, _utils.assertNodeType)(\"BlockStatement\")\n    },\n    async: {\n      validate: (0, _utils.assertValueType)(\"boolean\"),\n      default: false\n    }\n  }\n});\n(0, _utils.default)(\"ExportDefaultSpecifier\", {\n  visitor: [\"exported\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    exported: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\")\n    }\n  }\n});\n(0, _utils.default)(\"RecordExpression\", {\n  visitor: [\"properties\"],\n  aliases: [\"Expression\"],\n  fields: {\n    properties: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"ObjectProperty\", \"SpreadElement\")))\n    }\n  }\n});\n(0, _utils.default)(\"TupleExpression\", {\n  fields: {\n    elements: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"Expression\", \"SpreadElement\"))),\n      default: []\n    }\n  },\n  visitor: [\"elements\"],\n  aliases: [\"Expression\"]\n});\n(0, _utils.default)(\"DecimalLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: (0, _utils.assertValueType)(\"string\")\n    }\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"]\n});\n(0, _utils.default)(\"ModuleExpression\", {\n  visitor: [\"body\"],\n  fields: {\n    body: {\n      validate: (0, _utils.assertNodeType)(\"Program\")\n    }\n  },\n  aliases: [\"Expression\"]\n});\n(0, _utils.default)(\"TopicReference\", {\n  aliases: [\"Expression\"]\n});\n(0, _utils.default)(\"PipelineTopicExpression\", {\n  builder: [\"expression\"],\n  visitor: [\"expression\"],\n  fields: {\n    expression: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  },\n  aliases: [\"Expression\"]\n});\n(0, _utils.default)(\"PipelineBareFunction\", {\n  builder: [\"callee\"],\n  visitor: [\"callee\"],\n  fields: {\n    callee: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  },\n  aliases: [\"Expression\"]\n});\n(0, _utils.default)(\"PipelinePrimaryTopicReference\", {\n  aliases: [\"Expression\"]\n});","map":{"version":3,"sources":["/development/workspace/internal/ui/myreact-kafka/node_modules/@babel/types/lib/definitions/experimental.js"],"names":["_utils","require","default","visitor","aliases","fields","process","env","BABEL_TYPES_8_BREAKING","object","validate","Object","assign","oneOfNodeTypes","callee","assertNodeType","key","value","expression","builder","body","async","assertValueType","exported","properties","chain","assertEach","elements"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _utils = require(\"./utils\");\n\n(0, _utils.default)(\"ArgumentPlaceholder\", {});\n(0, _utils.default)(\"BindExpression\", {\n  visitor: [\"object\", \"callee\"],\n  aliases: [\"Expression\"],\n  fields: !process.env.BABEL_TYPES_8_BREAKING ? {\n    object: {\n      validate: Object.assign(() => {}, {\n        oneOfNodeTypes: [\"Expression\"]\n      })\n    },\n    callee: {\n      validate: Object.assign(() => {}, {\n        oneOfNodeTypes: [\"Expression\"]\n      })\n    }\n  } : {\n    object: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    },\n    callee: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  }\n});\n(0, _utils.default)(\"ImportAttribute\", {\n  visitor: [\"key\", \"value\"],\n  fields: {\n    key: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\", \"StringLiteral\")\n    },\n    value: {\n      validate: (0, _utils.assertNodeType)(\"StringLiteral\")\n    }\n  }\n});\n(0, _utils.default)(\"Decorator\", {\n  visitor: [\"expression\"],\n  fields: {\n    expression: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  }\n});\n(0, _utils.default)(\"DoExpression\", {\n  visitor: [\"body\"],\n  builder: [\"body\", \"async\"],\n  aliases: [\"Expression\"],\n  fields: {\n    body: {\n      validate: (0, _utils.assertNodeType)(\"BlockStatement\")\n    },\n    async: {\n      validate: (0, _utils.assertValueType)(\"boolean\"),\n      default: false\n    }\n  }\n});\n(0, _utils.default)(\"ExportDefaultSpecifier\", {\n  visitor: [\"exported\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    exported: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\")\n    }\n  }\n});\n(0, _utils.default)(\"RecordExpression\", {\n  visitor: [\"properties\"],\n  aliases: [\"Expression\"],\n  fields: {\n    properties: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"ObjectProperty\", \"SpreadElement\")))\n    }\n  }\n});\n(0, _utils.default)(\"TupleExpression\", {\n  fields: {\n    elements: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"Expression\", \"SpreadElement\"))),\n      default: []\n    }\n  },\n  visitor: [\"elements\"],\n  aliases: [\"Expression\"]\n});\n(0, _utils.default)(\"DecimalLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: (0, _utils.assertValueType)(\"string\")\n    }\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"]\n});\n(0, _utils.default)(\"ModuleExpression\", {\n  visitor: [\"body\"],\n  fields: {\n    body: {\n      validate: (0, _utils.assertNodeType)(\"Program\")\n    }\n  },\n  aliases: [\"Expression\"]\n});\n(0, _utils.default)(\"TopicReference\", {\n  aliases: [\"Expression\"]\n});\n(0, _utils.default)(\"PipelineTopicExpression\", {\n  builder: [\"expression\"],\n  visitor: [\"expression\"],\n  fields: {\n    expression: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  },\n  aliases: [\"Expression\"]\n});\n(0, _utils.default)(\"PipelineBareFunction\", {\n  builder: [\"callee\"],\n  visitor: [\"callee\"],\n  fields: {\n    callee: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  },\n  aliases: [\"Expression\"]\n});\n(0, _utils.default)(\"PipelinePrimaryTopicReference\", {\n  aliases: [\"Expression\"]\n});"]},"metadata":{},"sourceType":"script"}