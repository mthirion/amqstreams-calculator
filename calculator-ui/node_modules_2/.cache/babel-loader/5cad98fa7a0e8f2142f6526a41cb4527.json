{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isAnyTypeAnnotation = isAnyTypeAnnotation;\nexports.isArgumentPlaceholder = isArgumentPlaceholder;\nexports.isArrayExpression = isArrayExpression;\nexports.isArrayPattern = isArrayPattern;\nexports.isArrayTypeAnnotation = isArrayTypeAnnotation;\nexports.isArrowFunctionExpression = isArrowFunctionExpression;\nexports.isAssignmentExpression = isAssignmentExpression;\nexports.isAssignmentPattern = isAssignmentPattern;\nexports.isAwaitExpression = isAwaitExpression;\nexports.isBigIntLiteral = isBigIntLiteral;\nexports.isBinary = isBinary;\nexports.isBinaryExpression = isBinaryExpression;\nexports.isBindExpression = isBindExpression;\nexports.isBlock = isBlock;\nexports.isBlockParent = isBlockParent;\nexports.isBlockStatement = isBlockStatement;\nexports.isBooleanLiteral = isBooleanLiteral;\nexports.isBooleanLiteralTypeAnnotation = isBooleanLiteralTypeAnnotation;\nexports.isBooleanTypeAnnotation = isBooleanTypeAnnotation;\nexports.isBreakStatement = isBreakStatement;\nexports.isCallExpression = isCallExpression;\nexports.isCatchClause = isCatchClause;\nexports.isClass = isClass;\nexports.isClassBody = isClassBody;\nexports.isClassDeclaration = isClassDeclaration;\nexports.isClassExpression = isClassExpression;\nexports.isClassImplements = isClassImplements;\nexports.isClassMethod = isClassMethod;\nexports.isClassPrivateMethod = isClassPrivateMethod;\nexports.isClassPrivateProperty = isClassPrivateProperty;\nexports.isClassProperty = isClassProperty;\nexports.isCompletionStatement = isCompletionStatement;\nexports.isConditional = isConditional;\nexports.isConditionalExpression = isConditionalExpression;\nexports.isContinueStatement = isContinueStatement;\nexports.isDebuggerStatement = isDebuggerStatement;\nexports.isDecimalLiteral = isDecimalLiteral;\nexports.isDeclaration = isDeclaration;\nexports.isDeclareClass = isDeclareClass;\nexports.isDeclareExportAllDeclaration = isDeclareExportAllDeclaration;\nexports.isDeclareExportDeclaration = isDeclareExportDeclaration;\nexports.isDeclareFunction = isDeclareFunction;\nexports.isDeclareInterface = isDeclareInterface;\nexports.isDeclareModule = isDeclareModule;\nexports.isDeclareModuleExports = isDeclareModuleExports;\nexports.isDeclareOpaqueType = isDeclareOpaqueType;\nexports.isDeclareTypeAlias = isDeclareTypeAlias;\nexports.isDeclareVariable = isDeclareVariable;\nexports.isDeclaredPredicate = isDeclaredPredicate;\nexports.isDecorator = isDecorator;\nexports.isDirective = isDirective;\nexports.isDirectiveLiteral = isDirectiveLiteral;\nexports.isDoExpression = isDoExpression;\nexports.isDoWhileStatement = isDoWhileStatement;\nexports.isEmptyStatement = isEmptyStatement;\nexports.isEmptyTypeAnnotation = isEmptyTypeAnnotation;\nexports.isEnumBody = isEnumBody;\nexports.isEnumBooleanBody = isEnumBooleanBody;\nexports.isEnumBooleanMember = isEnumBooleanMember;\nexports.isEnumDeclaration = isEnumDeclaration;\nexports.isEnumDefaultedMember = isEnumDefaultedMember;\nexports.isEnumMember = isEnumMember;\nexports.isEnumNumberBody = isEnumNumberBody;\nexports.isEnumNumberMember = isEnumNumberMember;\nexports.isEnumStringBody = isEnumStringBody;\nexports.isEnumStringMember = isEnumStringMember;\nexports.isEnumSymbolBody = isEnumSymbolBody;\nexports.isExistsTypeAnnotation = isExistsTypeAnnotation;\nexports.isExportAllDeclaration = isExportAllDeclaration;\nexports.isExportDeclaration = isExportDeclaration;\nexports.isExportDefaultDeclaration = isExportDefaultDeclaration;\nexports.isExportDefaultSpecifier = isExportDefaultSpecifier;\nexports.isExportNamedDeclaration = isExportNamedDeclaration;\nexports.isExportNamespaceSpecifier = isExportNamespaceSpecifier;\nexports.isExportSpecifier = isExportSpecifier;\nexports.isExpression = isExpression;\nexports.isExpressionStatement = isExpressionStatement;\nexports.isExpressionWrapper = isExpressionWrapper;\nexports.isFile = isFile;\nexports.isFlow = isFlow;\nexports.isFlowBaseAnnotation = isFlowBaseAnnotation;\nexports.isFlowDeclaration = isFlowDeclaration;\nexports.isFlowPredicate = isFlowPredicate;\nexports.isFlowType = isFlowType;\nexports.isFor = isFor;\nexports.isForInStatement = isForInStatement;\nexports.isForOfStatement = isForOfStatement;\nexports.isForStatement = isForStatement;\nexports.isForXStatement = isForXStatement;\nexports.isFunction = isFunction;\nexports.isFunctionDeclaration = isFunctionDeclaration;\nexports.isFunctionExpression = isFunctionExpression;\nexports.isFunctionParent = isFunctionParent;\nexports.isFunctionTypeAnnotation = isFunctionTypeAnnotation;\nexports.isFunctionTypeParam = isFunctionTypeParam;\nexports.isGenericTypeAnnotation = isGenericTypeAnnotation;\nexports.isIdentifier = isIdentifier;\nexports.isIfStatement = isIfStatement;\nexports.isImmutable = isImmutable;\nexports.isImport = isImport;\nexports.isImportAttribute = isImportAttribute;\nexports.isImportDeclaration = isImportDeclaration;\nexports.isImportDefaultSpecifier = isImportDefaultSpecifier;\nexports.isImportNamespaceSpecifier = isImportNamespaceSpecifier;\nexports.isImportSpecifier = isImportSpecifier;\nexports.isIndexedAccessType = isIndexedAccessType;\nexports.isInferredPredicate = isInferredPredicate;\nexports.isInterfaceDeclaration = isInterfaceDeclaration;\nexports.isInterfaceExtends = isInterfaceExtends;\nexports.isInterfaceTypeAnnotation = isInterfaceTypeAnnotation;\nexports.isInterpreterDirective = isInterpreterDirective;\nexports.isIntersectionTypeAnnotation = isIntersectionTypeAnnotation;\nexports.isJSX = isJSX;\nexports.isJSXAttribute = isJSXAttribute;\nexports.isJSXClosingElement = isJSXClosingElement;\nexports.isJSXClosingFragment = isJSXClosingFragment;\nexports.isJSXElement = isJSXElement;\nexports.isJSXEmptyExpression = isJSXEmptyExpression;\nexports.isJSXExpressionContainer = isJSXExpressionContainer;\nexports.isJSXFragment = isJSXFragment;\nexports.isJSXIdentifier = isJSXIdentifier;\nexports.isJSXMemberExpression = isJSXMemberExpression;\nexports.isJSXNamespacedName = isJSXNamespacedName;\nexports.isJSXOpeningElement = isJSXOpeningElement;\nexports.isJSXOpeningFragment = isJSXOpeningFragment;\nexports.isJSXSpreadAttribute = isJSXSpreadAttribute;\nexports.isJSXSpreadChild = isJSXSpreadChild;\nexports.isJSXText = isJSXText;\nexports.isLVal = isLVal;\nexports.isLabeledStatement = isLabeledStatement;\nexports.isLiteral = isLiteral;\nexports.isLogicalExpression = isLogicalExpression;\nexports.isLoop = isLoop;\nexports.isMemberExpression = isMemberExpression;\nexports.isMetaProperty = isMetaProperty;\nexports.isMethod = isMethod;\nexports.isMiscellaneous = isMiscellaneous;\nexports.isMixedTypeAnnotation = isMixedTypeAnnotation;\nexports.isModuleDeclaration = isModuleDeclaration;\nexports.isModuleExpression = isModuleExpression;\nexports.isModuleSpecifier = isModuleSpecifier;\nexports.isNewExpression = isNewExpression;\nexports.isNoop = isNoop;\nexports.isNullLiteral = isNullLiteral;\nexports.isNullLiteralTypeAnnotation = isNullLiteralTypeAnnotation;\nexports.isNullableTypeAnnotation = isNullableTypeAnnotation;\nexports.isNumberLiteral = isNumberLiteral;\nexports.isNumberLiteralTypeAnnotation = isNumberLiteralTypeAnnotation;\nexports.isNumberTypeAnnotation = isNumberTypeAnnotation;\nexports.isNumericLiteral = isNumericLiteral;\nexports.isObjectExpression = isObjectExpression;\nexports.isObjectMember = isObjectMember;\nexports.isObjectMethod = isObjectMethod;\nexports.isObjectPattern = isObjectPattern;\nexports.isObjectProperty = isObjectProperty;\nexports.isObjectTypeAnnotation = isObjectTypeAnnotation;\nexports.isObjectTypeCallProperty = isObjectTypeCallProperty;\nexports.isObjectTypeIndexer = isObjectTypeIndexer;\nexports.isObjectTypeInternalSlot = isObjectTypeInternalSlot;\nexports.isObjectTypeProperty = isObjectTypeProperty;\nexports.isObjectTypeSpreadProperty = isObjectTypeSpreadProperty;\nexports.isOpaqueType = isOpaqueType;\nexports.isOptionalCallExpression = isOptionalCallExpression;\nexports.isOptionalIndexedAccessType = isOptionalIndexedAccessType;\nexports.isOptionalMemberExpression = isOptionalMemberExpression;\nexports.isParenthesizedExpression = isParenthesizedExpression;\nexports.isPattern = isPattern;\nexports.isPatternLike = isPatternLike;\nexports.isPipelineBareFunction = isPipelineBareFunction;\nexports.isPipelinePrimaryTopicReference = isPipelinePrimaryTopicReference;\nexports.isPipelineTopicExpression = isPipelineTopicExpression;\nexports.isPlaceholder = isPlaceholder;\nexports.isPrivate = isPrivate;\nexports.isPrivateName = isPrivateName;\nexports.isProgram = isProgram;\nexports.isProperty = isProperty;\nexports.isPureish = isPureish;\nexports.isQualifiedTypeIdentifier = isQualifiedTypeIdentifier;\nexports.isRecordExpression = isRecordExpression;\nexports.isRegExpLiteral = isRegExpLiteral;\nexports.isRegexLiteral = isRegexLiteral;\nexports.isRestElement = isRestElement;\nexports.isRestProperty = isRestProperty;\nexports.isReturnStatement = isReturnStatement;\nexports.isScopable = isScopable;\nexports.isSequenceExpression = isSequenceExpression;\nexports.isSpreadElement = isSpreadElement;\nexports.isSpreadProperty = isSpreadProperty;\nexports.isStandardized = isStandardized;\nexports.isStatement = isStatement;\nexports.isStaticBlock = isStaticBlock;\nexports.isStringLiteral = isStringLiteral;\nexports.isStringLiteralTypeAnnotation = isStringLiteralTypeAnnotation;\nexports.isStringTypeAnnotation = isStringTypeAnnotation;\nexports.isSuper = isSuper;\nexports.isSwitchCase = isSwitchCase;\nexports.isSwitchStatement = isSwitchStatement;\nexports.isSymbolTypeAnnotation = isSymbolTypeAnnotation;\nexports.isTSAnyKeyword = isTSAnyKeyword;\nexports.isTSArrayType = isTSArrayType;\nexports.isTSAsExpression = isTSAsExpression;\nexports.isTSBaseType = isTSBaseType;\nexports.isTSBigIntKeyword = isTSBigIntKeyword;\nexports.isTSBooleanKeyword = isTSBooleanKeyword;\nexports.isTSCallSignatureDeclaration = isTSCallSignatureDeclaration;\nexports.isTSConditionalType = isTSConditionalType;\nexports.isTSConstructSignatureDeclaration = isTSConstructSignatureDeclaration;\nexports.isTSConstructorType = isTSConstructorType;\nexports.isTSDeclareFunction = isTSDeclareFunction;\nexports.isTSDeclareMethod = isTSDeclareMethod;\nexports.isTSEntityName = isTSEntityName;\nexports.isTSEnumDeclaration = isTSEnumDeclaration;\nexports.isTSEnumMember = isTSEnumMember;\nexports.isTSExportAssignment = isTSExportAssignment;\nexports.isTSExpressionWithTypeArguments = isTSExpressionWithTypeArguments;\nexports.isTSExternalModuleReference = isTSExternalModuleReference;\nexports.isTSFunctionType = isTSFunctionType;\nexports.isTSImportEqualsDeclaration = isTSImportEqualsDeclaration;\nexports.isTSImportType = isTSImportType;\nexports.isTSIndexSignature = isTSIndexSignature;\nexports.isTSIndexedAccessType = isTSIndexedAccessType;\nexports.isTSInferType = isTSInferType;\nexports.isTSInterfaceBody = isTSInterfaceBody;\nexports.isTSInterfaceDeclaration = isTSInterfaceDeclaration;\nexports.isTSIntersectionType = isTSIntersectionType;\nexports.isTSIntrinsicKeyword = isTSIntrinsicKeyword;\nexports.isTSLiteralType = isTSLiteralType;\nexports.isTSMappedType = isTSMappedType;\nexports.isTSMethodSignature = isTSMethodSignature;\nexports.isTSModuleBlock = isTSModuleBlock;\nexports.isTSModuleDeclaration = isTSModuleDeclaration;\nexports.isTSNamedTupleMember = isTSNamedTupleMember;\nexports.isTSNamespaceExportDeclaration = isTSNamespaceExportDeclaration;\nexports.isTSNeverKeyword = isTSNeverKeyword;\nexports.isTSNonNullExpression = isTSNonNullExpression;\nexports.isTSNullKeyword = isTSNullKeyword;\nexports.isTSNumberKeyword = isTSNumberKeyword;\nexports.isTSObjectKeyword = isTSObjectKeyword;\nexports.isTSOptionalType = isTSOptionalType;\nexports.isTSParameterProperty = isTSParameterProperty;\nexports.isTSParenthesizedType = isTSParenthesizedType;\nexports.isTSPropertySignature = isTSPropertySignature;\nexports.isTSQualifiedName = isTSQualifiedName;\nexports.isTSRestType = isTSRestType;\nexports.isTSStringKeyword = isTSStringKeyword;\nexports.isTSSymbolKeyword = isTSSymbolKeyword;\nexports.isTSThisType = isTSThisType;\nexports.isTSTupleType = isTSTupleType;\nexports.isTSType = isTSType;\nexports.isTSTypeAliasDeclaration = isTSTypeAliasDeclaration;\nexports.isTSTypeAnnotation = isTSTypeAnnotation;\nexports.isTSTypeAssertion = isTSTypeAssertion;\nexports.isTSTypeElement = isTSTypeElement;\nexports.isTSTypeLiteral = isTSTypeLiteral;\nexports.isTSTypeOperator = isTSTypeOperator;\nexports.isTSTypeParameter = isTSTypeParameter;\nexports.isTSTypeParameterDeclaration = isTSTypeParameterDeclaration;\nexports.isTSTypeParameterInstantiation = isTSTypeParameterInstantiation;\nexports.isTSTypePredicate = isTSTypePredicate;\nexports.isTSTypeQuery = isTSTypeQuery;\nexports.isTSTypeReference = isTSTypeReference;\nexports.isTSUndefinedKeyword = isTSUndefinedKeyword;\nexports.isTSUnionType = isTSUnionType;\nexports.isTSUnknownKeyword = isTSUnknownKeyword;\nexports.isTSVoidKeyword = isTSVoidKeyword;\nexports.isTaggedTemplateExpression = isTaggedTemplateExpression;\nexports.isTemplateElement = isTemplateElement;\nexports.isTemplateLiteral = isTemplateLiteral;\nexports.isTerminatorless = isTerminatorless;\nexports.isThisExpression = isThisExpression;\nexports.isThisTypeAnnotation = isThisTypeAnnotation;\nexports.isThrowStatement = isThrowStatement;\nexports.isTopicReference = isTopicReference;\nexports.isTryStatement = isTryStatement;\nexports.isTupleExpression = isTupleExpression;\nexports.isTupleTypeAnnotation = isTupleTypeAnnotation;\nexports.isTypeAlias = isTypeAlias;\nexports.isTypeAnnotation = isTypeAnnotation;\nexports.isTypeCastExpression = isTypeCastExpression;\nexports.isTypeParameter = isTypeParameter;\nexports.isTypeParameterDeclaration = isTypeParameterDeclaration;\nexports.isTypeParameterInstantiation = isTypeParameterInstantiation;\nexports.isTypeScript = isTypeScript;\nexports.isTypeofTypeAnnotation = isTypeofTypeAnnotation;\nexports.isUnaryExpression = isUnaryExpression;\nexports.isUnaryLike = isUnaryLike;\nexports.isUnionTypeAnnotation = isUnionTypeAnnotation;\nexports.isUpdateExpression = isUpdateExpression;\nexports.isUserWhitespacable = isUserWhitespacable;\nexports.isV8IntrinsicIdentifier = isV8IntrinsicIdentifier;\nexports.isVariableDeclaration = isVariableDeclaration;\nexports.isVariableDeclarator = isVariableDeclarator;\nexports.isVariance = isVariance;\nexports.isVoidTypeAnnotation = isVoidTypeAnnotation;\nexports.isWhile = isWhile;\nexports.isWhileStatement = isWhileStatement;\nexports.isWithStatement = isWithStatement;\nexports.isYieldExpression = isYieldExpression;\n\nvar _shallowEqual = require(\"../../utils/shallowEqual\");\n\nfunction isArrayExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ArrayExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isAssignmentExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"AssignmentExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isBinaryExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"BinaryExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isInterpreterDirective(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"InterpreterDirective\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDirective(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Directive\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDirectiveLiteral(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DirectiveLiteral\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isBlockStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"BlockStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isBreakStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"BreakStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isCallExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"CallExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isCatchClause(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"CatchClause\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isConditionalExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ConditionalExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isContinueStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ContinueStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDebuggerStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DebuggerStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDoWhileStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DoWhileStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isEmptyStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"EmptyStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isExpressionStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ExpressionStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isFile(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"File\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isForInStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ForInStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isForStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ForStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isFunctionDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"FunctionDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isFunctionExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"FunctionExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isIdentifier(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Identifier\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isIfStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"IfStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isLabeledStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"LabeledStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isStringLiteral(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"StringLiteral\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isNumericLiteral(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"NumericLiteral\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isNullLiteral(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"NullLiteral\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isBooleanLiteral(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"BooleanLiteral\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isRegExpLiteral(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"RegExpLiteral\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isLogicalExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"LogicalExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isMemberExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"MemberExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isNewExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"NewExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isProgram(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Program\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isObjectExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ObjectExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isObjectMethod(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ObjectMethod\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isObjectProperty(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ObjectProperty\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isRestElement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"RestElement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isReturnStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ReturnStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isSequenceExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"SequenceExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isParenthesizedExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ParenthesizedExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isSwitchCase(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"SwitchCase\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isSwitchStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"SwitchStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isThisExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ThisExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isThrowStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ThrowStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTryStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TryStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isUnaryExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"UnaryExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isUpdateExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"UpdateExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isVariableDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"VariableDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isVariableDeclarator(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"VariableDeclarator\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isWhileStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"WhileStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isWithStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"WithStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isAssignmentPattern(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"AssignmentPattern\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isArrayPattern(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ArrayPattern\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isArrowFunctionExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ArrowFunctionExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isClassBody(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ClassBody\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isClassExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ClassExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isClassDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ClassDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isExportAllDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ExportAllDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isExportDefaultDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ExportDefaultDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isExportNamedDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ExportNamedDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isExportSpecifier(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ExportSpecifier\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isForOfStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ForOfStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isImportDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ImportDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isImportDefaultSpecifier(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ImportDefaultSpecifier\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isImportNamespaceSpecifier(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ImportNamespaceSpecifier\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isImportSpecifier(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ImportSpecifier\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isMetaProperty(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"MetaProperty\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isClassMethod(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ClassMethod\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isObjectPattern(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ObjectPattern\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isSpreadElement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"SpreadElement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isSuper(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Super\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTaggedTemplateExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TaggedTemplateExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTemplateElement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TemplateElement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTemplateLiteral(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TemplateLiteral\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isYieldExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"YieldExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isAwaitExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"AwaitExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isImport(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Import\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isBigIntLiteral(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"BigIntLiteral\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isExportNamespaceSpecifier(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ExportNamespaceSpecifier\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isOptionalMemberExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"OptionalMemberExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isOptionalCallExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"OptionalCallExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isClassProperty(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ClassProperty\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isClassPrivateProperty(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ClassPrivateProperty\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isClassPrivateMethod(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ClassPrivateMethod\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isPrivateName(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"PrivateName\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isStaticBlock(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"StaticBlock\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isAnyTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"AnyTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isArrayTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ArrayTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isBooleanTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"BooleanTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isBooleanLiteralTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"BooleanLiteralTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isNullLiteralTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"NullLiteralTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isClassImplements(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ClassImplements\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDeclareClass(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DeclareClass\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDeclareFunction(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DeclareFunction\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDeclareInterface(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DeclareInterface\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDeclareModule(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DeclareModule\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDeclareModuleExports(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DeclareModuleExports\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDeclareTypeAlias(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DeclareTypeAlias\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDeclareOpaqueType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DeclareOpaqueType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDeclareVariable(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DeclareVariable\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDeclareExportDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DeclareExportDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDeclareExportAllDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DeclareExportAllDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDeclaredPredicate(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DeclaredPredicate\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isExistsTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ExistsTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isFunctionTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"FunctionTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isFunctionTypeParam(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"FunctionTypeParam\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isGenericTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"GenericTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isInferredPredicate(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"InferredPredicate\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isInterfaceExtends(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"InterfaceExtends\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isInterfaceDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"InterfaceDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isInterfaceTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"InterfaceTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isIntersectionTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"IntersectionTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isMixedTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"MixedTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isEmptyTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"EmptyTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isNullableTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"NullableTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isNumberLiteralTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"NumberLiteralTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isNumberTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"NumberTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isObjectTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ObjectTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isObjectTypeInternalSlot(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ObjectTypeInternalSlot\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isObjectTypeCallProperty(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ObjectTypeCallProperty\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isObjectTypeIndexer(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ObjectTypeIndexer\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isObjectTypeProperty(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ObjectTypeProperty\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isObjectTypeSpreadProperty(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ObjectTypeSpreadProperty\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isOpaqueType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"OpaqueType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isQualifiedTypeIdentifier(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"QualifiedTypeIdentifier\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isStringLiteralTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"StringLiteralTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isStringTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"StringTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isSymbolTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"SymbolTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isThisTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ThisTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTupleTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TupleTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTypeofTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TypeofTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTypeAlias(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TypeAlias\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTypeCastExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TypeCastExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTypeParameter(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TypeParameter\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTypeParameterDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TypeParameterDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTypeParameterInstantiation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TypeParameterInstantiation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isUnionTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"UnionTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isVariance(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Variance\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isVoidTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"VoidTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isEnumDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"EnumDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isEnumBooleanBody(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"EnumBooleanBody\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isEnumNumberBody(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"EnumNumberBody\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isEnumStringBody(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"EnumStringBody\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isEnumSymbolBody(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"EnumSymbolBody\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isEnumBooleanMember(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"EnumBooleanMember\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isEnumNumberMember(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"EnumNumberMember\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isEnumStringMember(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"EnumStringMember\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isEnumDefaultedMember(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"EnumDefaultedMember\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isIndexedAccessType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"IndexedAccessType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isOptionalIndexedAccessType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"OptionalIndexedAccessType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXAttribute(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXAttribute\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXClosingElement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXClosingElement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXElement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXElement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXEmptyExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXEmptyExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXExpressionContainer(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXExpressionContainer\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXSpreadChild(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXSpreadChild\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXIdentifier(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXIdentifier\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXMemberExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXMemberExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXNamespacedName(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXNamespacedName\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXOpeningElement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXOpeningElement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXSpreadAttribute(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXSpreadAttribute\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXText(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXText\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXFragment(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXFragment\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXOpeningFragment(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXOpeningFragment\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXClosingFragment(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXClosingFragment\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isNoop(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Noop\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isPlaceholder(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Placeholder\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isV8IntrinsicIdentifier(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"V8IntrinsicIdentifier\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isArgumentPlaceholder(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ArgumentPlaceholder\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isBindExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"BindExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isImportAttribute(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ImportAttribute\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDecorator(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Decorator\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDoExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DoExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isExportDefaultSpecifier(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ExportDefaultSpecifier\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isRecordExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"RecordExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTupleExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TupleExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDecimalLiteral(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DecimalLiteral\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isModuleExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ModuleExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTopicReference(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TopicReference\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isPipelineTopicExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"PipelineTopicExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isPipelineBareFunction(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"PipelineBareFunction\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isPipelinePrimaryTopicReference(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"PipelinePrimaryTopicReference\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSParameterProperty(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSParameterProperty\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSDeclareFunction(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSDeclareFunction\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSDeclareMethod(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSDeclareMethod\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSQualifiedName(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSQualifiedName\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSCallSignatureDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSCallSignatureDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSConstructSignatureDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSConstructSignatureDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSPropertySignature(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSPropertySignature\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSMethodSignature(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSMethodSignature\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSIndexSignature(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSIndexSignature\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSAnyKeyword(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSAnyKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSBooleanKeyword(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSBooleanKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSBigIntKeyword(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSBigIntKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSIntrinsicKeyword(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSIntrinsicKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSNeverKeyword(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSNeverKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSNullKeyword(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSNullKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSNumberKeyword(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSNumberKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSObjectKeyword(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSObjectKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSStringKeyword(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSStringKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSSymbolKeyword(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSSymbolKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSUndefinedKeyword(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSUndefinedKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSUnknownKeyword(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSUnknownKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSVoidKeyword(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSVoidKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSThisType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSThisType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSFunctionType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSFunctionType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSConstructorType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSConstructorType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSTypeReference(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSTypeReference\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSTypePredicate(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSTypePredicate\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSTypeQuery(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSTypeQuery\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSTypeLiteral(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSTypeLiteral\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSArrayType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSArrayType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSTupleType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSTupleType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSOptionalType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSOptionalType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSRestType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSRestType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSNamedTupleMember(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSNamedTupleMember\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSUnionType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSUnionType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSIntersectionType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSIntersectionType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSConditionalType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSConditionalType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSInferType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSInferType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSParenthesizedType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSParenthesizedType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSTypeOperator(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSTypeOperator\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSIndexedAccessType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSIndexedAccessType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSMappedType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSMappedType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSLiteralType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSLiteralType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSExpressionWithTypeArguments(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSExpressionWithTypeArguments\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSInterfaceDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSInterfaceDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSInterfaceBody(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSInterfaceBody\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSTypeAliasDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSTypeAliasDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSAsExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSAsExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSTypeAssertion(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSTypeAssertion\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSEnumDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSEnumDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSEnumMember(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSEnumMember\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSModuleDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSModuleDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSModuleBlock(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSModuleBlock\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSImportType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSImportType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSImportEqualsDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSImportEqualsDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSExternalModuleReference(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSExternalModuleReference\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSNonNullExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSNonNullExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSExportAssignment(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSExportAssignment\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSNamespaceExportDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSNamespaceExportDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSTypeParameterInstantiation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSTypeParameterInstantiation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSTypeParameterDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSTypeParameterDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSTypeParameter(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSTypeParameter\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isStandardized(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"ArrayExpression\" === nodeType || \"AssignmentExpression\" === nodeType || \"BinaryExpression\" === nodeType || \"InterpreterDirective\" === nodeType || \"Directive\" === nodeType || \"DirectiveLiteral\" === nodeType || \"BlockStatement\" === nodeType || \"BreakStatement\" === nodeType || \"CallExpression\" === nodeType || \"CatchClause\" === nodeType || \"ConditionalExpression\" === nodeType || \"ContinueStatement\" === nodeType || \"DebuggerStatement\" === nodeType || \"DoWhileStatement\" === nodeType || \"EmptyStatement\" === nodeType || \"ExpressionStatement\" === nodeType || \"File\" === nodeType || \"ForInStatement\" === nodeType || \"ForStatement\" === nodeType || \"FunctionDeclaration\" === nodeType || \"FunctionExpression\" === nodeType || \"Identifier\" === nodeType || \"IfStatement\" === nodeType || \"LabeledStatement\" === nodeType || \"StringLiteral\" === nodeType || \"NumericLiteral\" === nodeType || \"NullLiteral\" === nodeType || \"BooleanLiteral\" === nodeType || \"RegExpLiteral\" === nodeType || \"LogicalExpression\" === nodeType || \"MemberExpression\" === nodeType || \"NewExpression\" === nodeType || \"Program\" === nodeType || \"ObjectExpression\" === nodeType || \"ObjectMethod\" === nodeType || \"ObjectProperty\" === nodeType || \"RestElement\" === nodeType || \"ReturnStatement\" === nodeType || \"SequenceExpression\" === nodeType || \"ParenthesizedExpression\" === nodeType || \"SwitchCase\" === nodeType || \"SwitchStatement\" === nodeType || \"ThisExpression\" === nodeType || \"ThrowStatement\" === nodeType || \"TryStatement\" === nodeType || \"UnaryExpression\" === nodeType || \"UpdateExpression\" === nodeType || \"VariableDeclaration\" === nodeType || \"VariableDeclarator\" === nodeType || \"WhileStatement\" === nodeType || \"WithStatement\" === nodeType || \"AssignmentPattern\" === nodeType || \"ArrayPattern\" === nodeType || \"ArrowFunctionExpression\" === nodeType || \"ClassBody\" === nodeType || \"ClassExpression\" === nodeType || \"ClassDeclaration\" === nodeType || \"ExportAllDeclaration\" === nodeType || \"ExportDefaultDeclaration\" === nodeType || \"ExportNamedDeclaration\" === nodeType || \"ExportSpecifier\" === nodeType || \"ForOfStatement\" === nodeType || \"ImportDeclaration\" === nodeType || \"ImportDefaultSpecifier\" === nodeType || \"ImportNamespaceSpecifier\" === nodeType || \"ImportSpecifier\" === nodeType || \"MetaProperty\" === nodeType || \"ClassMethod\" === nodeType || \"ObjectPattern\" === nodeType || \"SpreadElement\" === nodeType || \"Super\" === nodeType || \"TaggedTemplateExpression\" === nodeType || \"TemplateElement\" === nodeType || \"TemplateLiteral\" === nodeType || \"YieldExpression\" === nodeType || \"AwaitExpression\" === nodeType || \"Import\" === nodeType || \"BigIntLiteral\" === nodeType || \"ExportNamespaceSpecifier\" === nodeType || \"OptionalMemberExpression\" === nodeType || \"OptionalCallExpression\" === nodeType || \"ClassProperty\" === nodeType || \"ClassPrivateProperty\" === nodeType || \"ClassPrivateMethod\" === nodeType || \"PrivateName\" === nodeType || \"StaticBlock\" === nodeType || nodeType === \"Placeholder\" && (\"Identifier\" === node.expectedNode || \"StringLiteral\" === node.expectedNode || \"BlockStatement\" === node.expectedNode || \"ClassBody\" === node.expectedNode)) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"ArrayExpression\" === nodeType || \"AssignmentExpression\" === nodeType || \"BinaryExpression\" === nodeType || \"CallExpression\" === nodeType || \"ConditionalExpression\" === nodeType || \"FunctionExpression\" === nodeType || \"Identifier\" === nodeType || \"StringLiteral\" === nodeType || \"NumericLiteral\" === nodeType || \"NullLiteral\" === nodeType || \"BooleanLiteral\" === nodeType || \"RegExpLiteral\" === nodeType || \"LogicalExpression\" === nodeType || \"MemberExpression\" === nodeType || \"NewExpression\" === nodeType || \"ObjectExpression\" === nodeType || \"SequenceExpression\" === nodeType || \"ParenthesizedExpression\" === nodeType || \"ThisExpression\" === nodeType || \"UnaryExpression\" === nodeType || \"UpdateExpression\" === nodeType || \"ArrowFunctionExpression\" === nodeType || \"ClassExpression\" === nodeType || \"MetaProperty\" === nodeType || \"Super\" === nodeType || \"TaggedTemplateExpression\" === nodeType || \"TemplateLiteral\" === nodeType || \"YieldExpression\" === nodeType || \"AwaitExpression\" === nodeType || \"Import\" === nodeType || \"BigIntLiteral\" === nodeType || \"OptionalMemberExpression\" === nodeType || \"OptionalCallExpression\" === nodeType || \"TypeCastExpression\" === nodeType || \"JSXElement\" === nodeType || \"JSXFragment\" === nodeType || \"BindExpression\" === nodeType || \"DoExpression\" === nodeType || \"RecordExpression\" === nodeType || \"TupleExpression\" === nodeType || \"DecimalLiteral\" === nodeType || \"ModuleExpression\" === nodeType || \"TopicReference\" === nodeType || \"PipelineTopicExpression\" === nodeType || \"PipelineBareFunction\" === nodeType || \"PipelinePrimaryTopicReference\" === nodeType || \"TSAsExpression\" === nodeType || \"TSTypeAssertion\" === nodeType || \"TSNonNullExpression\" === nodeType || nodeType === \"Placeholder\" && (\"Expression\" === node.expectedNode || \"Identifier\" === node.expectedNode || \"StringLiteral\" === node.expectedNode)) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isBinary(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"BinaryExpression\" === nodeType || \"LogicalExpression\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isScopable(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"BlockStatement\" === nodeType || \"CatchClause\" === nodeType || \"DoWhileStatement\" === nodeType || \"ForInStatement\" === nodeType || \"ForStatement\" === nodeType || \"FunctionDeclaration\" === nodeType || \"FunctionExpression\" === nodeType || \"Program\" === nodeType || \"ObjectMethod\" === nodeType || \"SwitchStatement\" === nodeType || \"WhileStatement\" === nodeType || \"ArrowFunctionExpression\" === nodeType || \"ClassExpression\" === nodeType || \"ClassDeclaration\" === nodeType || \"ForOfStatement\" === nodeType || \"ClassMethod\" === nodeType || \"ClassPrivateMethod\" === nodeType || \"StaticBlock\" === nodeType || \"TSModuleBlock\" === nodeType || nodeType === \"Placeholder\" && \"BlockStatement\" === node.expectedNode) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isBlockParent(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"BlockStatement\" === nodeType || \"CatchClause\" === nodeType || \"DoWhileStatement\" === nodeType || \"ForInStatement\" === nodeType || \"ForStatement\" === nodeType || \"FunctionDeclaration\" === nodeType || \"FunctionExpression\" === nodeType || \"Program\" === nodeType || \"ObjectMethod\" === nodeType || \"SwitchStatement\" === nodeType || \"WhileStatement\" === nodeType || \"ArrowFunctionExpression\" === nodeType || \"ForOfStatement\" === nodeType || \"ClassMethod\" === nodeType || \"ClassPrivateMethod\" === nodeType || \"StaticBlock\" === nodeType || \"TSModuleBlock\" === nodeType || nodeType === \"Placeholder\" && \"BlockStatement\" === node.expectedNode) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isBlock(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"BlockStatement\" === nodeType || \"Program\" === nodeType || \"TSModuleBlock\" === nodeType || nodeType === \"Placeholder\" && \"BlockStatement\" === node.expectedNode) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"BlockStatement\" === nodeType || \"BreakStatement\" === nodeType || \"ContinueStatement\" === nodeType || \"DebuggerStatement\" === nodeType || \"DoWhileStatement\" === nodeType || \"EmptyStatement\" === nodeType || \"ExpressionStatement\" === nodeType || \"ForInStatement\" === nodeType || \"ForStatement\" === nodeType || \"FunctionDeclaration\" === nodeType || \"IfStatement\" === nodeType || \"LabeledStatement\" === nodeType || \"ReturnStatement\" === nodeType || \"SwitchStatement\" === nodeType || \"ThrowStatement\" === nodeType || \"TryStatement\" === nodeType || \"VariableDeclaration\" === nodeType || \"WhileStatement\" === nodeType || \"WithStatement\" === nodeType || \"ClassDeclaration\" === nodeType || \"ExportAllDeclaration\" === nodeType || \"ExportDefaultDeclaration\" === nodeType || \"ExportNamedDeclaration\" === nodeType || \"ForOfStatement\" === nodeType || \"ImportDeclaration\" === nodeType || \"DeclareClass\" === nodeType || \"DeclareFunction\" === nodeType || \"DeclareInterface\" === nodeType || \"DeclareModule\" === nodeType || \"DeclareModuleExports\" === nodeType || \"DeclareTypeAlias\" === nodeType || \"DeclareOpaqueType\" === nodeType || \"DeclareVariable\" === nodeType || \"DeclareExportDeclaration\" === nodeType || \"DeclareExportAllDeclaration\" === nodeType || \"InterfaceDeclaration\" === nodeType || \"OpaqueType\" === nodeType || \"TypeAlias\" === nodeType || \"EnumDeclaration\" === nodeType || \"TSDeclareFunction\" === nodeType || \"TSInterfaceDeclaration\" === nodeType || \"TSTypeAliasDeclaration\" === nodeType || \"TSEnumDeclaration\" === nodeType || \"TSModuleDeclaration\" === nodeType || \"TSImportEqualsDeclaration\" === nodeType || \"TSExportAssignment\" === nodeType || \"TSNamespaceExportDeclaration\" === nodeType || nodeType === \"Placeholder\" && (\"Statement\" === node.expectedNode || \"Declaration\" === node.expectedNode || \"BlockStatement\" === node.expectedNode)) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTerminatorless(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"BreakStatement\" === nodeType || \"ContinueStatement\" === nodeType || \"ReturnStatement\" === nodeType || \"ThrowStatement\" === nodeType || \"YieldExpression\" === nodeType || \"AwaitExpression\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isCompletionStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"BreakStatement\" === nodeType || \"ContinueStatement\" === nodeType || \"ReturnStatement\" === nodeType || \"ThrowStatement\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isConditional(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"ConditionalExpression\" === nodeType || \"IfStatement\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isLoop(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"DoWhileStatement\" === nodeType || \"ForInStatement\" === nodeType || \"ForStatement\" === nodeType || \"WhileStatement\" === nodeType || \"ForOfStatement\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isWhile(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"DoWhileStatement\" === nodeType || \"WhileStatement\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isExpressionWrapper(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"ExpressionStatement\" === nodeType || \"ParenthesizedExpression\" === nodeType || \"TypeCastExpression\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isFor(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"ForInStatement\" === nodeType || \"ForStatement\" === nodeType || \"ForOfStatement\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isForXStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"ForInStatement\" === nodeType || \"ForOfStatement\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isFunction(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"FunctionDeclaration\" === nodeType || \"FunctionExpression\" === nodeType || \"ObjectMethod\" === nodeType || \"ArrowFunctionExpression\" === nodeType || \"ClassMethod\" === nodeType || \"ClassPrivateMethod\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isFunctionParent(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"FunctionDeclaration\" === nodeType || \"FunctionExpression\" === nodeType || \"ObjectMethod\" === nodeType || \"ArrowFunctionExpression\" === nodeType || \"ClassMethod\" === nodeType || \"ClassPrivateMethod\" === nodeType || \"StaticBlock\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isPureish(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"FunctionDeclaration\" === nodeType || \"FunctionExpression\" === nodeType || \"StringLiteral\" === nodeType || \"NumericLiteral\" === nodeType || \"NullLiteral\" === nodeType || \"BooleanLiteral\" === nodeType || \"RegExpLiteral\" === nodeType || \"ArrowFunctionExpression\" === nodeType || \"BigIntLiteral\" === nodeType || \"DecimalLiteral\" === nodeType || nodeType === \"Placeholder\" && \"StringLiteral\" === node.expectedNode) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"FunctionDeclaration\" === nodeType || \"VariableDeclaration\" === nodeType || \"ClassDeclaration\" === nodeType || \"ExportAllDeclaration\" === nodeType || \"ExportDefaultDeclaration\" === nodeType || \"ExportNamedDeclaration\" === nodeType || \"ImportDeclaration\" === nodeType || \"DeclareClass\" === nodeType || \"DeclareFunction\" === nodeType || \"DeclareInterface\" === nodeType || \"DeclareModule\" === nodeType || \"DeclareModuleExports\" === nodeType || \"DeclareTypeAlias\" === nodeType || \"DeclareOpaqueType\" === nodeType || \"DeclareVariable\" === nodeType || \"DeclareExportDeclaration\" === nodeType || \"DeclareExportAllDeclaration\" === nodeType || \"InterfaceDeclaration\" === nodeType || \"OpaqueType\" === nodeType || \"TypeAlias\" === nodeType || \"EnumDeclaration\" === nodeType || \"TSDeclareFunction\" === nodeType || \"TSInterfaceDeclaration\" === nodeType || \"TSTypeAliasDeclaration\" === nodeType || \"TSEnumDeclaration\" === nodeType || \"TSModuleDeclaration\" === nodeType || nodeType === \"Placeholder\" && \"Declaration\" === node.expectedNode) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isPatternLike(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"Identifier\" === nodeType || \"RestElement\" === nodeType || \"AssignmentPattern\" === nodeType || \"ArrayPattern\" === nodeType || \"ObjectPattern\" === nodeType || nodeType === \"Placeholder\" && (\"Pattern\" === node.expectedNode || \"Identifier\" === node.expectedNode)) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isLVal(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"Identifier\" === nodeType || \"MemberExpression\" === nodeType || \"RestElement\" === nodeType || \"AssignmentPattern\" === nodeType || \"ArrayPattern\" === nodeType || \"ObjectPattern\" === nodeType || \"TSParameterProperty\" === nodeType || nodeType === \"Placeholder\" && (\"Pattern\" === node.expectedNode || \"Identifier\" === node.expectedNode)) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSEntityName(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"Identifier\" === nodeType || \"TSQualifiedName\" === nodeType || nodeType === \"Placeholder\" && \"Identifier\" === node.expectedNode) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isLiteral(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"StringLiteral\" === nodeType || \"NumericLiteral\" === nodeType || \"NullLiteral\" === nodeType || \"BooleanLiteral\" === nodeType || \"RegExpLiteral\" === nodeType || \"TemplateLiteral\" === nodeType || \"BigIntLiteral\" === nodeType || \"DecimalLiteral\" === nodeType || nodeType === \"Placeholder\" && \"StringLiteral\" === node.expectedNode) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isImmutable(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"StringLiteral\" === nodeType || \"NumericLiteral\" === nodeType || \"NullLiteral\" === nodeType || \"BooleanLiteral\" === nodeType || \"BigIntLiteral\" === nodeType || \"JSXAttribute\" === nodeType || \"JSXClosingElement\" === nodeType || \"JSXElement\" === nodeType || \"JSXExpressionContainer\" === nodeType || \"JSXSpreadChild\" === nodeType || \"JSXOpeningElement\" === nodeType || \"JSXText\" === nodeType || \"JSXFragment\" === nodeType || \"JSXOpeningFragment\" === nodeType || \"JSXClosingFragment\" === nodeType || \"DecimalLiteral\" === nodeType || nodeType === \"Placeholder\" && \"StringLiteral\" === node.expectedNode) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isUserWhitespacable(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"ObjectMethod\" === nodeType || \"ObjectProperty\" === nodeType || \"ObjectTypeInternalSlot\" === nodeType || \"ObjectTypeCallProperty\" === nodeType || \"ObjectTypeIndexer\" === nodeType || \"ObjectTypeProperty\" === nodeType || \"ObjectTypeSpreadProperty\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isMethod(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"ObjectMethod\" === nodeType || \"ClassMethod\" === nodeType || \"ClassPrivateMethod\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isObjectMember(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"ObjectMethod\" === nodeType || \"ObjectProperty\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isProperty(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"ObjectProperty\" === nodeType || \"ClassProperty\" === nodeType || \"ClassPrivateProperty\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isUnaryLike(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"UnaryExpression\" === nodeType || \"SpreadElement\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isPattern(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"AssignmentPattern\" === nodeType || \"ArrayPattern\" === nodeType || \"ObjectPattern\" === nodeType || nodeType === \"Placeholder\" && \"Pattern\" === node.expectedNode) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isClass(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"ClassExpression\" === nodeType || \"ClassDeclaration\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isModuleDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"ExportAllDeclaration\" === nodeType || \"ExportDefaultDeclaration\" === nodeType || \"ExportNamedDeclaration\" === nodeType || \"ImportDeclaration\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isExportDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"ExportAllDeclaration\" === nodeType || \"ExportDefaultDeclaration\" === nodeType || \"ExportNamedDeclaration\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isModuleSpecifier(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"ExportSpecifier\" === nodeType || \"ImportDefaultSpecifier\" === nodeType || \"ImportNamespaceSpecifier\" === nodeType || \"ImportSpecifier\" === nodeType || \"ExportNamespaceSpecifier\" === nodeType || \"ExportDefaultSpecifier\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isPrivate(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"ClassPrivateProperty\" === nodeType || \"ClassPrivateMethod\" === nodeType || \"PrivateName\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isFlow(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"AnyTypeAnnotation\" === nodeType || \"ArrayTypeAnnotation\" === nodeType || \"BooleanTypeAnnotation\" === nodeType || \"BooleanLiteralTypeAnnotation\" === nodeType || \"NullLiteralTypeAnnotation\" === nodeType || \"ClassImplements\" === nodeType || \"DeclareClass\" === nodeType || \"DeclareFunction\" === nodeType || \"DeclareInterface\" === nodeType || \"DeclareModule\" === nodeType || \"DeclareModuleExports\" === nodeType || \"DeclareTypeAlias\" === nodeType || \"DeclareOpaqueType\" === nodeType || \"DeclareVariable\" === nodeType || \"DeclareExportDeclaration\" === nodeType || \"DeclareExportAllDeclaration\" === nodeType || \"DeclaredPredicate\" === nodeType || \"ExistsTypeAnnotation\" === nodeType || \"FunctionTypeAnnotation\" === nodeType || \"FunctionTypeParam\" === nodeType || \"GenericTypeAnnotation\" === nodeType || \"InferredPredicate\" === nodeType || \"InterfaceExtends\" === nodeType || \"InterfaceDeclaration\" === nodeType || \"InterfaceTypeAnnotation\" === nodeType || \"IntersectionTypeAnnotation\" === nodeType || \"MixedTypeAnnotation\" === nodeType || \"EmptyTypeAnnotation\" === nodeType || \"NullableTypeAnnotation\" === nodeType || \"NumberLiteralTypeAnnotation\" === nodeType || \"NumberTypeAnnotation\" === nodeType || \"ObjectTypeAnnotation\" === nodeType || \"ObjectTypeInternalSlot\" === nodeType || \"ObjectTypeCallProperty\" === nodeType || \"ObjectTypeIndexer\" === nodeType || \"ObjectTypeProperty\" === nodeType || \"ObjectTypeSpreadProperty\" === nodeType || \"OpaqueType\" === nodeType || \"QualifiedTypeIdentifier\" === nodeType || \"StringLiteralTypeAnnotation\" === nodeType || \"StringTypeAnnotation\" === nodeType || \"SymbolTypeAnnotation\" === nodeType || \"ThisTypeAnnotation\" === nodeType || \"TupleTypeAnnotation\" === nodeType || \"TypeofTypeAnnotation\" === nodeType || \"TypeAlias\" === nodeType || \"TypeAnnotation\" === nodeType || \"TypeCastExpression\" === nodeType || \"TypeParameter\" === nodeType || \"TypeParameterDeclaration\" === nodeType || \"TypeParameterInstantiation\" === nodeType || \"UnionTypeAnnotation\" === nodeType || \"Variance\" === nodeType || \"VoidTypeAnnotation\" === nodeType || \"EnumDeclaration\" === nodeType || \"EnumBooleanBody\" === nodeType || \"EnumNumberBody\" === nodeType || \"EnumStringBody\" === nodeType || \"EnumSymbolBody\" === nodeType || \"EnumBooleanMember\" === nodeType || \"EnumNumberMember\" === nodeType || \"EnumStringMember\" === nodeType || \"EnumDefaultedMember\" === nodeType || \"IndexedAccessType\" === nodeType || \"OptionalIndexedAccessType\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isFlowType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"AnyTypeAnnotation\" === nodeType || \"ArrayTypeAnnotation\" === nodeType || \"BooleanTypeAnnotation\" === nodeType || \"BooleanLiteralTypeAnnotation\" === nodeType || \"NullLiteralTypeAnnotation\" === nodeType || \"ExistsTypeAnnotation\" === nodeType || \"FunctionTypeAnnotation\" === nodeType || \"GenericTypeAnnotation\" === nodeType || \"InterfaceTypeAnnotation\" === nodeType || \"IntersectionTypeAnnotation\" === nodeType || \"MixedTypeAnnotation\" === nodeType || \"EmptyTypeAnnotation\" === nodeType || \"NullableTypeAnnotation\" === nodeType || \"NumberLiteralTypeAnnotation\" === nodeType || \"NumberTypeAnnotation\" === nodeType || \"ObjectTypeAnnotation\" === nodeType || \"StringLiteralTypeAnnotation\" === nodeType || \"StringTypeAnnotation\" === nodeType || \"SymbolTypeAnnotation\" === nodeType || \"ThisTypeAnnotation\" === nodeType || \"TupleTypeAnnotation\" === nodeType || \"TypeofTypeAnnotation\" === nodeType || \"UnionTypeAnnotation\" === nodeType || \"VoidTypeAnnotation\" === nodeType || \"IndexedAccessType\" === nodeType || \"OptionalIndexedAccessType\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isFlowBaseAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"AnyTypeAnnotation\" === nodeType || \"BooleanTypeAnnotation\" === nodeType || \"NullLiteralTypeAnnotation\" === nodeType || \"MixedTypeAnnotation\" === nodeType || \"EmptyTypeAnnotation\" === nodeType || \"NumberTypeAnnotation\" === nodeType || \"StringTypeAnnotation\" === nodeType || \"SymbolTypeAnnotation\" === nodeType || \"ThisTypeAnnotation\" === nodeType || \"VoidTypeAnnotation\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isFlowDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"DeclareClass\" === nodeType || \"DeclareFunction\" === nodeType || \"DeclareInterface\" === nodeType || \"DeclareModule\" === nodeType || \"DeclareModuleExports\" === nodeType || \"DeclareTypeAlias\" === nodeType || \"DeclareOpaqueType\" === nodeType || \"DeclareVariable\" === nodeType || \"DeclareExportDeclaration\" === nodeType || \"DeclareExportAllDeclaration\" === nodeType || \"InterfaceDeclaration\" === nodeType || \"OpaqueType\" === nodeType || \"TypeAlias\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isFlowPredicate(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"DeclaredPredicate\" === nodeType || \"InferredPredicate\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isEnumBody(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"EnumBooleanBody\" === nodeType || \"EnumNumberBody\" === nodeType || \"EnumStringBody\" === nodeType || \"EnumSymbolBody\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isEnumMember(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"EnumBooleanMember\" === nodeType || \"EnumNumberMember\" === nodeType || \"EnumStringMember\" === nodeType || \"EnumDefaultedMember\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSX(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"JSXAttribute\" === nodeType || \"JSXClosingElement\" === nodeType || \"JSXElement\" === nodeType || \"JSXEmptyExpression\" === nodeType || \"JSXExpressionContainer\" === nodeType || \"JSXSpreadChild\" === nodeType || \"JSXIdentifier\" === nodeType || \"JSXMemberExpression\" === nodeType || \"JSXNamespacedName\" === nodeType || \"JSXOpeningElement\" === nodeType || \"JSXSpreadAttribute\" === nodeType || \"JSXText\" === nodeType || \"JSXFragment\" === nodeType || \"JSXOpeningFragment\" === nodeType || \"JSXClosingFragment\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isMiscellaneous(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"Noop\" === nodeType || \"Placeholder\" === nodeType || \"V8IntrinsicIdentifier\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTypeScript(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"TSParameterProperty\" === nodeType || \"TSDeclareFunction\" === nodeType || \"TSDeclareMethod\" === nodeType || \"TSQualifiedName\" === nodeType || \"TSCallSignatureDeclaration\" === nodeType || \"TSConstructSignatureDeclaration\" === nodeType || \"TSPropertySignature\" === nodeType || \"TSMethodSignature\" === nodeType || \"TSIndexSignature\" === nodeType || \"TSAnyKeyword\" === nodeType || \"TSBooleanKeyword\" === nodeType || \"TSBigIntKeyword\" === nodeType || \"TSIntrinsicKeyword\" === nodeType || \"TSNeverKeyword\" === nodeType || \"TSNullKeyword\" === nodeType || \"TSNumberKeyword\" === nodeType || \"TSObjectKeyword\" === nodeType || \"TSStringKeyword\" === nodeType || \"TSSymbolKeyword\" === nodeType || \"TSUndefinedKeyword\" === nodeType || \"TSUnknownKeyword\" === nodeType || \"TSVoidKeyword\" === nodeType || \"TSThisType\" === nodeType || \"TSFunctionType\" === nodeType || \"TSConstructorType\" === nodeType || \"TSTypeReference\" === nodeType || \"TSTypePredicate\" === nodeType || \"TSTypeQuery\" === nodeType || \"TSTypeLiteral\" === nodeType || \"TSArrayType\" === nodeType || \"TSTupleType\" === nodeType || \"TSOptionalType\" === nodeType || \"TSRestType\" === nodeType || \"TSNamedTupleMember\" === nodeType || \"TSUnionType\" === nodeType || \"TSIntersectionType\" === nodeType || \"TSConditionalType\" === nodeType || \"TSInferType\" === nodeType || \"TSParenthesizedType\" === nodeType || \"TSTypeOperator\" === nodeType || \"TSIndexedAccessType\" === nodeType || \"TSMappedType\" === nodeType || \"TSLiteralType\" === nodeType || \"TSExpressionWithTypeArguments\" === nodeType || \"TSInterfaceDeclaration\" === nodeType || \"TSInterfaceBody\" === nodeType || \"TSTypeAliasDeclaration\" === nodeType || \"TSAsExpression\" === nodeType || \"TSTypeAssertion\" === nodeType || \"TSEnumDeclaration\" === nodeType || \"TSEnumMember\" === nodeType || \"TSModuleDeclaration\" === nodeType || \"TSModuleBlock\" === nodeType || \"TSImportType\" === nodeType || \"TSImportEqualsDeclaration\" === nodeType || \"TSExternalModuleReference\" === nodeType || \"TSNonNullExpression\" === nodeType || \"TSExportAssignment\" === nodeType || \"TSNamespaceExportDeclaration\" === nodeType || \"TSTypeAnnotation\" === nodeType || \"TSTypeParameterInstantiation\" === nodeType || \"TSTypeParameterDeclaration\" === nodeType || \"TSTypeParameter\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSTypeElement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"TSCallSignatureDeclaration\" === nodeType || \"TSConstructSignatureDeclaration\" === nodeType || \"TSPropertySignature\" === nodeType || \"TSMethodSignature\" === nodeType || \"TSIndexSignature\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"TSAnyKeyword\" === nodeType || \"TSBooleanKeyword\" === nodeType || \"TSBigIntKeyword\" === nodeType || \"TSIntrinsicKeyword\" === nodeType || \"TSNeverKeyword\" === nodeType || \"TSNullKeyword\" === nodeType || \"TSNumberKeyword\" === nodeType || \"TSObjectKeyword\" === nodeType || \"TSStringKeyword\" === nodeType || \"TSSymbolKeyword\" === nodeType || \"TSUndefinedKeyword\" === nodeType || \"TSUnknownKeyword\" === nodeType || \"TSVoidKeyword\" === nodeType || \"TSThisType\" === nodeType || \"TSFunctionType\" === nodeType || \"TSConstructorType\" === nodeType || \"TSTypeReference\" === nodeType || \"TSTypePredicate\" === nodeType || \"TSTypeQuery\" === nodeType || \"TSTypeLiteral\" === nodeType || \"TSArrayType\" === nodeType || \"TSTupleType\" === nodeType || \"TSOptionalType\" === nodeType || \"TSRestType\" === nodeType || \"TSUnionType\" === nodeType || \"TSIntersectionType\" === nodeType || \"TSConditionalType\" === nodeType || \"TSInferType\" === nodeType || \"TSParenthesizedType\" === nodeType || \"TSTypeOperator\" === nodeType || \"TSIndexedAccessType\" === nodeType || \"TSMappedType\" === nodeType || \"TSLiteralType\" === nodeType || \"TSExpressionWithTypeArguments\" === nodeType || \"TSImportType\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSBaseType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"TSAnyKeyword\" === nodeType || \"TSBooleanKeyword\" === nodeType || \"TSBigIntKeyword\" === nodeType || \"TSIntrinsicKeyword\" === nodeType || \"TSNeverKeyword\" === nodeType || \"TSNullKeyword\" === nodeType || \"TSNumberKeyword\" === nodeType || \"TSObjectKeyword\" === nodeType || \"TSStringKeyword\" === nodeType || \"TSSymbolKeyword\" === nodeType || \"TSUndefinedKeyword\" === nodeType || \"TSUnknownKeyword\" === nodeType || \"TSVoidKeyword\" === nodeType || \"TSThisType\" === nodeType || \"TSLiteralType\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isNumberLiteral(node, opts) {\n  console.trace(\"The node type NumberLiteral has been renamed to NumericLiteral\");\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"NumberLiteral\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isRegexLiteral(node, opts) {\n  console.trace(\"The node type RegexLiteral has been renamed to RegExpLiteral\");\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"RegexLiteral\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isRestProperty(node, opts) {\n  console.trace(\"The node type RestProperty has been renamed to RestElement\");\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"RestProperty\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isSpreadProperty(node, opts) {\n  console.trace(\"The node type SpreadProperty has been renamed to SpreadElement\");\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"SpreadProperty\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}","map":{"version":3,"sources":["/development/workspace/internal/ui/myreact-kafka/node_modules/@babel/types/lib/validators/generated/index.js"],"names":["Object","defineProperty","exports","value","isAnyTypeAnnotation","isArgumentPlaceholder","isArrayExpression","isArrayPattern","isArrayTypeAnnotation","isArrowFunctionExpression","isAssignmentExpression","isAssignmentPattern","isAwaitExpression","isBigIntLiteral","isBinary","isBinaryExpression","isBindExpression","isBlock","isBlockParent","isBlockStatement","isBooleanLiteral","isBooleanLiteralTypeAnnotation","isBooleanTypeAnnotation","isBreakStatement","isCallExpression","isCatchClause","isClass","isClassBody","isClassDeclaration","isClassExpression","isClassImplements","isClassMethod","isClassPrivateMethod","isClassPrivateProperty","isClassProperty","isCompletionStatement","isConditional","isConditionalExpression","isContinueStatement","isDebuggerStatement","isDecimalLiteral","isDeclaration","isDeclareClass","isDeclareExportAllDeclaration","isDeclareExportDeclaration","isDeclareFunction","isDeclareInterface","isDeclareModule","isDeclareModuleExports","isDeclareOpaqueType","isDeclareTypeAlias","isDeclareVariable","isDeclaredPredicate","isDecorator","isDirective","isDirectiveLiteral","isDoExpression","isDoWhileStatement","isEmptyStatement","isEmptyTypeAnnotation","isEnumBody","isEnumBooleanBody","isEnumBooleanMember","isEnumDeclaration","isEnumDefaultedMember","isEnumMember","isEnumNumberBody","isEnumNumberMember","isEnumStringBody","isEnumStringMember","isEnumSymbolBody","isExistsTypeAnnotation","isExportAllDeclaration","isExportDeclaration","isExportDefaultDeclaration","isExportDefaultSpecifier","isExportNamedDeclaration","isExportNamespaceSpecifier","isExportSpecifier","isExpression","isExpressionStatement","isExpressionWrapper","isFile","isFlow","isFlowBaseAnnotation","isFlowDeclaration","isFlowPredicate","isFlowType","isFor","isForInStatement","isForOfStatement","isForStatement","isForXStatement","isFunction","isFunctionDeclaration","isFunctionExpression","isFunctionParent","isFunctionTypeAnnotation","isFunctionTypeParam","isGenericTypeAnnotation","isIdentifier","isIfStatement","isImmutable","isImport","isImportAttribute","isImportDeclaration","isImportDefaultSpecifier","isImportNamespaceSpecifier","isImportSpecifier","isIndexedAccessType","isInferredPredicate","isInterfaceDeclaration","isInterfaceExtends","isInterfaceTypeAnnotation","isInterpreterDirective","isIntersectionTypeAnnotation","isJSX","isJSXAttribute","isJSXClosingElement","isJSXClosingFragment","isJSXElement","isJSXEmptyExpression","isJSXExpressionContainer","isJSXFragment","isJSXIdentifier","isJSXMemberExpression","isJSXNamespacedName","isJSXOpeningElement","isJSXOpeningFragment","isJSXSpreadAttribute","isJSXSpreadChild","isJSXText","isLVal","isLabeledStatement","isLiteral","isLogicalExpression","isLoop","isMemberExpression","isMetaProperty","isMethod","isMiscellaneous","isMixedTypeAnnotation","isModuleDeclaration","isModuleExpression","isModuleSpecifier","isNewExpression","isNoop","isNullLiteral","isNullLiteralTypeAnnotation","isNullableTypeAnnotation","isNumberLiteral","isNumberLiteralTypeAnnotation","isNumberTypeAnnotation","isNumericLiteral","isObjectExpression","isObjectMember","isObjectMethod","isObjectPattern","isObjectProperty","isObjectTypeAnnotation","isObjectTypeCallProperty","isObjectTypeIndexer","isObjectTypeInternalSlot","isObjectTypeProperty","isObjectTypeSpreadProperty","isOpaqueType","isOptionalCallExpression","isOptionalIndexedAccessType","isOptionalMemberExpression","isParenthesizedExpression","isPattern","isPatternLike","isPipelineBareFunction","isPipelinePrimaryTopicReference","isPipelineTopicExpression","isPlaceholder","isPrivate","isPrivateName","isProgram","isProperty","isPureish","isQualifiedTypeIdentifier","isRecordExpression","isRegExpLiteral","isRegexLiteral","isRestElement","isRestProperty","isReturnStatement","isScopable","isSequenceExpression","isSpreadElement","isSpreadProperty","isStandardized","isStatement","isStaticBlock","isStringLiteral","isStringLiteralTypeAnnotation","isStringTypeAnnotation","isSuper","isSwitchCase","isSwitchStatement","isSymbolTypeAnnotation","isTSAnyKeyword","isTSArrayType","isTSAsExpression","isTSBaseType","isTSBigIntKeyword","isTSBooleanKeyword","isTSCallSignatureDeclaration","isTSConditionalType","isTSConstructSignatureDeclaration","isTSConstructorType","isTSDeclareFunction","isTSDeclareMethod","isTSEntityName","isTSEnumDeclaration","isTSEnumMember","isTSExportAssignment","isTSExpressionWithTypeArguments","isTSExternalModuleReference","isTSFunctionType","isTSImportEqualsDeclaration","isTSImportType","isTSIndexSignature","isTSIndexedAccessType","isTSInferType","isTSInterfaceBody","isTSInterfaceDeclaration","isTSIntersectionType","isTSIntrinsicKeyword","isTSLiteralType","isTSMappedType","isTSMethodSignature","isTSModuleBlock","isTSModuleDeclaration","isTSNamedTupleMember","isTSNamespaceExportDeclaration","isTSNeverKeyword","isTSNonNullExpression","isTSNullKeyword","isTSNumberKeyword","isTSObjectKeyword","isTSOptionalType","isTSParameterProperty","isTSParenthesizedType","isTSPropertySignature","isTSQualifiedName","isTSRestType","isTSStringKeyword","isTSSymbolKeyword","isTSThisType","isTSTupleType","isTSType","isTSTypeAliasDeclaration","isTSTypeAnnotation","isTSTypeAssertion","isTSTypeElement","isTSTypeLiteral","isTSTypeOperator","isTSTypeParameter","isTSTypeParameterDeclaration","isTSTypeParameterInstantiation","isTSTypePredicate","isTSTypeQuery","isTSTypeReference","isTSUndefinedKeyword","isTSUnionType","isTSUnknownKeyword","isTSVoidKeyword","isTaggedTemplateExpression","isTemplateElement","isTemplateLiteral","isTerminatorless","isThisExpression","isThisTypeAnnotation","isThrowStatement","isTopicReference","isTryStatement","isTupleExpression","isTupleTypeAnnotation","isTypeAlias","isTypeAnnotation","isTypeCastExpression","isTypeParameter","isTypeParameterDeclaration","isTypeParameterInstantiation","isTypeScript","isTypeofTypeAnnotation","isUnaryExpression","isUnaryLike","isUnionTypeAnnotation","isUpdateExpression","isUserWhitespacable","isV8IntrinsicIdentifier","isVariableDeclaration","isVariableDeclarator","isVariance","isVoidTypeAnnotation","isWhile","isWhileStatement","isWithStatement","isYieldExpression","_shallowEqual","require","node","opts","nodeType","type","default","expectedNode","console","trace"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isAnyTypeAnnotation = isAnyTypeAnnotation;\nexports.isArgumentPlaceholder = isArgumentPlaceholder;\nexports.isArrayExpression = isArrayExpression;\nexports.isArrayPattern = isArrayPattern;\nexports.isArrayTypeAnnotation = isArrayTypeAnnotation;\nexports.isArrowFunctionExpression = isArrowFunctionExpression;\nexports.isAssignmentExpression = isAssignmentExpression;\nexports.isAssignmentPattern = isAssignmentPattern;\nexports.isAwaitExpression = isAwaitExpression;\nexports.isBigIntLiteral = isBigIntLiteral;\nexports.isBinary = isBinary;\nexports.isBinaryExpression = isBinaryExpression;\nexports.isBindExpression = isBindExpression;\nexports.isBlock = isBlock;\nexports.isBlockParent = isBlockParent;\nexports.isBlockStatement = isBlockStatement;\nexports.isBooleanLiteral = isBooleanLiteral;\nexports.isBooleanLiteralTypeAnnotation = isBooleanLiteralTypeAnnotation;\nexports.isBooleanTypeAnnotation = isBooleanTypeAnnotation;\nexports.isBreakStatement = isBreakStatement;\nexports.isCallExpression = isCallExpression;\nexports.isCatchClause = isCatchClause;\nexports.isClass = isClass;\nexports.isClassBody = isClassBody;\nexports.isClassDeclaration = isClassDeclaration;\nexports.isClassExpression = isClassExpression;\nexports.isClassImplements = isClassImplements;\nexports.isClassMethod = isClassMethod;\nexports.isClassPrivateMethod = isClassPrivateMethod;\nexports.isClassPrivateProperty = isClassPrivateProperty;\nexports.isClassProperty = isClassProperty;\nexports.isCompletionStatement = isCompletionStatement;\nexports.isConditional = isConditional;\nexports.isConditionalExpression = isConditionalExpression;\nexports.isContinueStatement = isContinueStatement;\nexports.isDebuggerStatement = isDebuggerStatement;\nexports.isDecimalLiteral = isDecimalLiteral;\nexports.isDeclaration = isDeclaration;\nexports.isDeclareClass = isDeclareClass;\nexports.isDeclareExportAllDeclaration = isDeclareExportAllDeclaration;\nexports.isDeclareExportDeclaration = isDeclareExportDeclaration;\nexports.isDeclareFunction = isDeclareFunction;\nexports.isDeclareInterface = isDeclareInterface;\nexports.isDeclareModule = isDeclareModule;\nexports.isDeclareModuleExports = isDeclareModuleExports;\nexports.isDeclareOpaqueType = isDeclareOpaqueType;\nexports.isDeclareTypeAlias = isDeclareTypeAlias;\nexports.isDeclareVariable = isDeclareVariable;\nexports.isDeclaredPredicate = isDeclaredPredicate;\nexports.isDecorator = isDecorator;\nexports.isDirective = isDirective;\nexports.isDirectiveLiteral = isDirectiveLiteral;\nexports.isDoExpression = isDoExpression;\nexports.isDoWhileStatement = isDoWhileStatement;\nexports.isEmptyStatement = isEmptyStatement;\nexports.isEmptyTypeAnnotation = isEmptyTypeAnnotation;\nexports.isEnumBody = isEnumBody;\nexports.isEnumBooleanBody = isEnumBooleanBody;\nexports.isEnumBooleanMember = isEnumBooleanMember;\nexports.isEnumDeclaration = isEnumDeclaration;\nexports.isEnumDefaultedMember = isEnumDefaultedMember;\nexports.isEnumMember = isEnumMember;\nexports.isEnumNumberBody = isEnumNumberBody;\nexports.isEnumNumberMember = isEnumNumberMember;\nexports.isEnumStringBody = isEnumStringBody;\nexports.isEnumStringMember = isEnumStringMember;\nexports.isEnumSymbolBody = isEnumSymbolBody;\nexports.isExistsTypeAnnotation = isExistsTypeAnnotation;\nexports.isExportAllDeclaration = isExportAllDeclaration;\nexports.isExportDeclaration = isExportDeclaration;\nexports.isExportDefaultDeclaration = isExportDefaultDeclaration;\nexports.isExportDefaultSpecifier = isExportDefaultSpecifier;\nexports.isExportNamedDeclaration = isExportNamedDeclaration;\nexports.isExportNamespaceSpecifier = isExportNamespaceSpecifier;\nexports.isExportSpecifier = isExportSpecifier;\nexports.isExpression = isExpression;\nexports.isExpressionStatement = isExpressionStatement;\nexports.isExpressionWrapper = isExpressionWrapper;\nexports.isFile = isFile;\nexports.isFlow = isFlow;\nexports.isFlowBaseAnnotation = isFlowBaseAnnotation;\nexports.isFlowDeclaration = isFlowDeclaration;\nexports.isFlowPredicate = isFlowPredicate;\nexports.isFlowType = isFlowType;\nexports.isFor = isFor;\nexports.isForInStatement = isForInStatement;\nexports.isForOfStatement = isForOfStatement;\nexports.isForStatement = isForStatement;\nexports.isForXStatement = isForXStatement;\nexports.isFunction = isFunction;\nexports.isFunctionDeclaration = isFunctionDeclaration;\nexports.isFunctionExpression = isFunctionExpression;\nexports.isFunctionParent = isFunctionParent;\nexports.isFunctionTypeAnnotation = isFunctionTypeAnnotation;\nexports.isFunctionTypeParam = isFunctionTypeParam;\nexports.isGenericTypeAnnotation = isGenericTypeAnnotation;\nexports.isIdentifier = isIdentifier;\nexports.isIfStatement = isIfStatement;\nexports.isImmutable = isImmutable;\nexports.isImport = isImport;\nexports.isImportAttribute = isImportAttribute;\nexports.isImportDeclaration = isImportDeclaration;\nexports.isImportDefaultSpecifier = isImportDefaultSpecifier;\nexports.isImportNamespaceSpecifier = isImportNamespaceSpecifier;\nexports.isImportSpecifier = isImportSpecifier;\nexports.isIndexedAccessType = isIndexedAccessType;\nexports.isInferredPredicate = isInferredPredicate;\nexports.isInterfaceDeclaration = isInterfaceDeclaration;\nexports.isInterfaceExtends = isInterfaceExtends;\nexports.isInterfaceTypeAnnotation = isInterfaceTypeAnnotation;\nexports.isInterpreterDirective = isInterpreterDirective;\nexports.isIntersectionTypeAnnotation = isIntersectionTypeAnnotation;\nexports.isJSX = isJSX;\nexports.isJSXAttribute = isJSXAttribute;\nexports.isJSXClosingElement = isJSXClosingElement;\nexports.isJSXClosingFragment = isJSXClosingFragment;\nexports.isJSXElement = isJSXElement;\nexports.isJSXEmptyExpression = isJSXEmptyExpression;\nexports.isJSXExpressionContainer = isJSXExpressionContainer;\nexports.isJSXFragment = isJSXFragment;\nexports.isJSXIdentifier = isJSXIdentifier;\nexports.isJSXMemberExpression = isJSXMemberExpression;\nexports.isJSXNamespacedName = isJSXNamespacedName;\nexports.isJSXOpeningElement = isJSXOpeningElement;\nexports.isJSXOpeningFragment = isJSXOpeningFragment;\nexports.isJSXSpreadAttribute = isJSXSpreadAttribute;\nexports.isJSXSpreadChild = isJSXSpreadChild;\nexports.isJSXText = isJSXText;\nexports.isLVal = isLVal;\nexports.isLabeledStatement = isLabeledStatement;\nexports.isLiteral = isLiteral;\nexports.isLogicalExpression = isLogicalExpression;\nexports.isLoop = isLoop;\nexports.isMemberExpression = isMemberExpression;\nexports.isMetaProperty = isMetaProperty;\nexports.isMethod = isMethod;\nexports.isMiscellaneous = isMiscellaneous;\nexports.isMixedTypeAnnotation = isMixedTypeAnnotation;\nexports.isModuleDeclaration = isModuleDeclaration;\nexports.isModuleExpression = isModuleExpression;\nexports.isModuleSpecifier = isModuleSpecifier;\nexports.isNewExpression = isNewExpression;\nexports.isNoop = isNoop;\nexports.isNullLiteral = isNullLiteral;\nexports.isNullLiteralTypeAnnotation = isNullLiteralTypeAnnotation;\nexports.isNullableTypeAnnotation = isNullableTypeAnnotation;\nexports.isNumberLiteral = isNumberLiteral;\nexports.isNumberLiteralTypeAnnotation = isNumberLiteralTypeAnnotation;\nexports.isNumberTypeAnnotation = isNumberTypeAnnotation;\nexports.isNumericLiteral = isNumericLiteral;\nexports.isObjectExpression = isObjectExpression;\nexports.isObjectMember = isObjectMember;\nexports.isObjectMethod = isObjectMethod;\nexports.isObjectPattern = isObjectPattern;\nexports.isObjectProperty = isObjectProperty;\nexports.isObjectTypeAnnotation = isObjectTypeAnnotation;\nexports.isObjectTypeCallProperty = isObjectTypeCallProperty;\nexports.isObjectTypeIndexer = isObjectTypeIndexer;\nexports.isObjectTypeInternalSlot = isObjectTypeInternalSlot;\nexports.isObjectTypeProperty = isObjectTypeProperty;\nexports.isObjectTypeSpreadProperty = isObjectTypeSpreadProperty;\nexports.isOpaqueType = isOpaqueType;\nexports.isOptionalCallExpression = isOptionalCallExpression;\nexports.isOptionalIndexedAccessType = isOptionalIndexedAccessType;\nexports.isOptionalMemberExpression = isOptionalMemberExpression;\nexports.isParenthesizedExpression = isParenthesizedExpression;\nexports.isPattern = isPattern;\nexports.isPatternLike = isPatternLike;\nexports.isPipelineBareFunction = isPipelineBareFunction;\nexports.isPipelinePrimaryTopicReference = isPipelinePrimaryTopicReference;\nexports.isPipelineTopicExpression = isPipelineTopicExpression;\nexports.isPlaceholder = isPlaceholder;\nexports.isPrivate = isPrivate;\nexports.isPrivateName = isPrivateName;\nexports.isProgram = isProgram;\nexports.isProperty = isProperty;\nexports.isPureish = isPureish;\nexports.isQualifiedTypeIdentifier = isQualifiedTypeIdentifier;\nexports.isRecordExpression = isRecordExpression;\nexports.isRegExpLiteral = isRegExpLiteral;\nexports.isRegexLiteral = isRegexLiteral;\nexports.isRestElement = isRestElement;\nexports.isRestProperty = isRestProperty;\nexports.isReturnStatement = isReturnStatement;\nexports.isScopable = isScopable;\nexports.isSequenceExpression = isSequenceExpression;\nexports.isSpreadElement = isSpreadElement;\nexports.isSpreadProperty = isSpreadProperty;\nexports.isStandardized = isStandardized;\nexports.isStatement = isStatement;\nexports.isStaticBlock = isStaticBlock;\nexports.isStringLiteral = isStringLiteral;\nexports.isStringLiteralTypeAnnotation = isStringLiteralTypeAnnotation;\nexports.isStringTypeAnnotation = isStringTypeAnnotation;\nexports.isSuper = isSuper;\nexports.isSwitchCase = isSwitchCase;\nexports.isSwitchStatement = isSwitchStatement;\nexports.isSymbolTypeAnnotation = isSymbolTypeAnnotation;\nexports.isTSAnyKeyword = isTSAnyKeyword;\nexports.isTSArrayType = isTSArrayType;\nexports.isTSAsExpression = isTSAsExpression;\nexports.isTSBaseType = isTSBaseType;\nexports.isTSBigIntKeyword = isTSBigIntKeyword;\nexports.isTSBooleanKeyword = isTSBooleanKeyword;\nexports.isTSCallSignatureDeclaration = isTSCallSignatureDeclaration;\nexports.isTSConditionalType = isTSConditionalType;\nexports.isTSConstructSignatureDeclaration = isTSConstructSignatureDeclaration;\nexports.isTSConstructorType = isTSConstructorType;\nexports.isTSDeclareFunction = isTSDeclareFunction;\nexports.isTSDeclareMethod = isTSDeclareMethod;\nexports.isTSEntityName = isTSEntityName;\nexports.isTSEnumDeclaration = isTSEnumDeclaration;\nexports.isTSEnumMember = isTSEnumMember;\nexports.isTSExportAssignment = isTSExportAssignment;\nexports.isTSExpressionWithTypeArguments = isTSExpressionWithTypeArguments;\nexports.isTSExternalModuleReference = isTSExternalModuleReference;\nexports.isTSFunctionType = isTSFunctionType;\nexports.isTSImportEqualsDeclaration = isTSImportEqualsDeclaration;\nexports.isTSImportType = isTSImportType;\nexports.isTSIndexSignature = isTSIndexSignature;\nexports.isTSIndexedAccessType = isTSIndexedAccessType;\nexports.isTSInferType = isTSInferType;\nexports.isTSInterfaceBody = isTSInterfaceBody;\nexports.isTSInterfaceDeclaration = isTSInterfaceDeclaration;\nexports.isTSIntersectionType = isTSIntersectionType;\nexports.isTSIntrinsicKeyword = isTSIntrinsicKeyword;\nexports.isTSLiteralType = isTSLiteralType;\nexports.isTSMappedType = isTSMappedType;\nexports.isTSMethodSignature = isTSMethodSignature;\nexports.isTSModuleBlock = isTSModuleBlock;\nexports.isTSModuleDeclaration = isTSModuleDeclaration;\nexports.isTSNamedTupleMember = isTSNamedTupleMember;\nexports.isTSNamespaceExportDeclaration = isTSNamespaceExportDeclaration;\nexports.isTSNeverKeyword = isTSNeverKeyword;\nexports.isTSNonNullExpression = isTSNonNullExpression;\nexports.isTSNullKeyword = isTSNullKeyword;\nexports.isTSNumberKeyword = isTSNumberKeyword;\nexports.isTSObjectKeyword = isTSObjectKeyword;\nexports.isTSOptionalType = isTSOptionalType;\nexports.isTSParameterProperty = isTSParameterProperty;\nexports.isTSParenthesizedType = isTSParenthesizedType;\nexports.isTSPropertySignature = isTSPropertySignature;\nexports.isTSQualifiedName = isTSQualifiedName;\nexports.isTSRestType = isTSRestType;\nexports.isTSStringKeyword = isTSStringKeyword;\nexports.isTSSymbolKeyword = isTSSymbolKeyword;\nexports.isTSThisType = isTSThisType;\nexports.isTSTupleType = isTSTupleType;\nexports.isTSType = isTSType;\nexports.isTSTypeAliasDeclaration = isTSTypeAliasDeclaration;\nexports.isTSTypeAnnotation = isTSTypeAnnotation;\nexports.isTSTypeAssertion = isTSTypeAssertion;\nexports.isTSTypeElement = isTSTypeElement;\nexports.isTSTypeLiteral = isTSTypeLiteral;\nexports.isTSTypeOperator = isTSTypeOperator;\nexports.isTSTypeParameter = isTSTypeParameter;\nexports.isTSTypeParameterDeclaration = isTSTypeParameterDeclaration;\nexports.isTSTypeParameterInstantiation = isTSTypeParameterInstantiation;\nexports.isTSTypePredicate = isTSTypePredicate;\nexports.isTSTypeQuery = isTSTypeQuery;\nexports.isTSTypeReference = isTSTypeReference;\nexports.isTSUndefinedKeyword = isTSUndefinedKeyword;\nexports.isTSUnionType = isTSUnionType;\nexports.isTSUnknownKeyword = isTSUnknownKeyword;\nexports.isTSVoidKeyword = isTSVoidKeyword;\nexports.isTaggedTemplateExpression = isTaggedTemplateExpression;\nexports.isTemplateElement = isTemplateElement;\nexports.isTemplateLiteral = isTemplateLiteral;\nexports.isTerminatorless = isTerminatorless;\nexports.isThisExpression = isThisExpression;\nexports.isThisTypeAnnotation = isThisTypeAnnotation;\nexports.isThrowStatement = isThrowStatement;\nexports.isTopicReference = isTopicReference;\nexports.isTryStatement = isTryStatement;\nexports.isTupleExpression = isTupleExpression;\nexports.isTupleTypeAnnotation = isTupleTypeAnnotation;\nexports.isTypeAlias = isTypeAlias;\nexports.isTypeAnnotation = isTypeAnnotation;\nexports.isTypeCastExpression = isTypeCastExpression;\nexports.isTypeParameter = isTypeParameter;\nexports.isTypeParameterDeclaration = isTypeParameterDeclaration;\nexports.isTypeParameterInstantiation = isTypeParameterInstantiation;\nexports.isTypeScript = isTypeScript;\nexports.isTypeofTypeAnnotation = isTypeofTypeAnnotation;\nexports.isUnaryExpression = isUnaryExpression;\nexports.isUnaryLike = isUnaryLike;\nexports.isUnionTypeAnnotation = isUnionTypeAnnotation;\nexports.isUpdateExpression = isUpdateExpression;\nexports.isUserWhitespacable = isUserWhitespacable;\nexports.isV8IntrinsicIdentifier = isV8IntrinsicIdentifier;\nexports.isVariableDeclaration = isVariableDeclaration;\nexports.isVariableDeclarator = isVariableDeclarator;\nexports.isVariance = isVariance;\nexports.isVoidTypeAnnotation = isVoidTypeAnnotation;\nexports.isWhile = isWhile;\nexports.isWhileStatement = isWhileStatement;\nexports.isWithStatement = isWithStatement;\nexports.isYieldExpression = isYieldExpression;\n\nvar _shallowEqual = require(\"../../utils/shallowEqual\");\n\nfunction isArrayExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ArrayExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isAssignmentExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"AssignmentExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isBinaryExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"BinaryExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isInterpreterDirective(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"InterpreterDirective\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDirective(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Directive\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDirectiveLiteral(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DirectiveLiteral\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isBlockStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"BlockStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isBreakStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"BreakStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isCallExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"CallExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isCatchClause(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"CatchClause\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isConditionalExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ConditionalExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isContinueStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ContinueStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDebuggerStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DebuggerStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDoWhileStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DoWhileStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isEmptyStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"EmptyStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isExpressionStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ExpressionStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isFile(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"File\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isForInStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ForInStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isForStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ForStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isFunctionDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"FunctionDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isFunctionExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"FunctionExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isIdentifier(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Identifier\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isIfStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"IfStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isLabeledStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"LabeledStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isStringLiteral(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"StringLiteral\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isNumericLiteral(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"NumericLiteral\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isNullLiteral(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"NullLiteral\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isBooleanLiteral(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"BooleanLiteral\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isRegExpLiteral(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"RegExpLiteral\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isLogicalExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"LogicalExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isMemberExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"MemberExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isNewExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"NewExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isProgram(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Program\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isObjectExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ObjectExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isObjectMethod(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ObjectMethod\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isObjectProperty(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ObjectProperty\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isRestElement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"RestElement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isReturnStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ReturnStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isSequenceExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"SequenceExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isParenthesizedExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ParenthesizedExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isSwitchCase(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"SwitchCase\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isSwitchStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"SwitchStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isThisExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ThisExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isThrowStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ThrowStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTryStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TryStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isUnaryExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"UnaryExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isUpdateExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"UpdateExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isVariableDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"VariableDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isVariableDeclarator(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"VariableDeclarator\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isWhileStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"WhileStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isWithStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"WithStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isAssignmentPattern(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"AssignmentPattern\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isArrayPattern(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ArrayPattern\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isArrowFunctionExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ArrowFunctionExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isClassBody(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ClassBody\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isClassExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ClassExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isClassDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ClassDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isExportAllDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ExportAllDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isExportDefaultDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ExportDefaultDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isExportNamedDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ExportNamedDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isExportSpecifier(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ExportSpecifier\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isForOfStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ForOfStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isImportDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ImportDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isImportDefaultSpecifier(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ImportDefaultSpecifier\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isImportNamespaceSpecifier(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ImportNamespaceSpecifier\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isImportSpecifier(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ImportSpecifier\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isMetaProperty(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"MetaProperty\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isClassMethod(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ClassMethod\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isObjectPattern(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ObjectPattern\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isSpreadElement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"SpreadElement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isSuper(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Super\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTaggedTemplateExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TaggedTemplateExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTemplateElement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TemplateElement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTemplateLiteral(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TemplateLiteral\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isYieldExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"YieldExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isAwaitExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"AwaitExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isImport(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Import\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isBigIntLiteral(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"BigIntLiteral\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isExportNamespaceSpecifier(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ExportNamespaceSpecifier\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isOptionalMemberExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"OptionalMemberExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isOptionalCallExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"OptionalCallExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isClassProperty(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ClassProperty\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isClassPrivateProperty(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ClassPrivateProperty\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isClassPrivateMethod(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ClassPrivateMethod\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isPrivateName(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"PrivateName\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isStaticBlock(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"StaticBlock\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isAnyTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"AnyTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isArrayTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ArrayTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isBooleanTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"BooleanTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isBooleanLiteralTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"BooleanLiteralTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isNullLiteralTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"NullLiteralTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isClassImplements(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ClassImplements\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDeclareClass(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DeclareClass\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDeclareFunction(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DeclareFunction\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDeclareInterface(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DeclareInterface\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDeclareModule(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DeclareModule\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDeclareModuleExports(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DeclareModuleExports\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDeclareTypeAlias(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DeclareTypeAlias\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDeclareOpaqueType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DeclareOpaqueType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDeclareVariable(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DeclareVariable\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDeclareExportDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DeclareExportDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDeclareExportAllDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DeclareExportAllDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDeclaredPredicate(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DeclaredPredicate\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isExistsTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ExistsTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isFunctionTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"FunctionTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isFunctionTypeParam(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"FunctionTypeParam\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isGenericTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"GenericTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isInferredPredicate(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"InferredPredicate\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isInterfaceExtends(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"InterfaceExtends\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isInterfaceDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"InterfaceDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isInterfaceTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"InterfaceTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isIntersectionTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"IntersectionTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isMixedTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"MixedTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isEmptyTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"EmptyTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isNullableTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"NullableTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isNumberLiteralTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"NumberLiteralTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isNumberTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"NumberTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isObjectTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ObjectTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isObjectTypeInternalSlot(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ObjectTypeInternalSlot\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isObjectTypeCallProperty(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ObjectTypeCallProperty\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isObjectTypeIndexer(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ObjectTypeIndexer\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isObjectTypeProperty(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ObjectTypeProperty\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isObjectTypeSpreadProperty(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ObjectTypeSpreadProperty\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isOpaqueType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"OpaqueType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isQualifiedTypeIdentifier(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"QualifiedTypeIdentifier\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isStringLiteralTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"StringLiteralTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isStringTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"StringTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isSymbolTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"SymbolTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isThisTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ThisTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTupleTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TupleTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTypeofTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TypeofTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTypeAlias(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TypeAlias\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTypeCastExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TypeCastExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTypeParameter(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TypeParameter\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTypeParameterDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TypeParameterDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTypeParameterInstantiation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TypeParameterInstantiation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isUnionTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"UnionTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isVariance(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Variance\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isVoidTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"VoidTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isEnumDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"EnumDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isEnumBooleanBody(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"EnumBooleanBody\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isEnumNumberBody(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"EnumNumberBody\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isEnumStringBody(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"EnumStringBody\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isEnumSymbolBody(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"EnumSymbolBody\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isEnumBooleanMember(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"EnumBooleanMember\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isEnumNumberMember(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"EnumNumberMember\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isEnumStringMember(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"EnumStringMember\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isEnumDefaultedMember(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"EnumDefaultedMember\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isIndexedAccessType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"IndexedAccessType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isOptionalIndexedAccessType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"OptionalIndexedAccessType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXAttribute(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXAttribute\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXClosingElement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXClosingElement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXElement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXElement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXEmptyExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXEmptyExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXExpressionContainer(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXExpressionContainer\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXSpreadChild(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXSpreadChild\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXIdentifier(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXIdentifier\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXMemberExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXMemberExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXNamespacedName(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXNamespacedName\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXOpeningElement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXOpeningElement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXSpreadAttribute(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXSpreadAttribute\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXText(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXText\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXFragment(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXFragment\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXOpeningFragment(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXOpeningFragment\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXClosingFragment(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXClosingFragment\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isNoop(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Noop\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isPlaceholder(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Placeholder\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isV8IntrinsicIdentifier(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"V8IntrinsicIdentifier\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isArgumentPlaceholder(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ArgumentPlaceholder\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isBindExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"BindExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isImportAttribute(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ImportAttribute\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDecorator(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Decorator\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDoExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DoExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isExportDefaultSpecifier(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ExportDefaultSpecifier\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isRecordExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"RecordExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTupleExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TupleExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDecimalLiteral(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DecimalLiteral\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isModuleExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ModuleExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTopicReference(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TopicReference\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isPipelineTopicExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"PipelineTopicExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isPipelineBareFunction(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"PipelineBareFunction\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isPipelinePrimaryTopicReference(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"PipelinePrimaryTopicReference\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSParameterProperty(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSParameterProperty\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSDeclareFunction(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSDeclareFunction\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSDeclareMethod(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSDeclareMethod\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSQualifiedName(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSQualifiedName\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSCallSignatureDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSCallSignatureDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSConstructSignatureDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSConstructSignatureDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSPropertySignature(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSPropertySignature\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSMethodSignature(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSMethodSignature\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSIndexSignature(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSIndexSignature\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSAnyKeyword(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSAnyKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSBooleanKeyword(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSBooleanKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSBigIntKeyword(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSBigIntKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSIntrinsicKeyword(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSIntrinsicKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSNeverKeyword(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSNeverKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSNullKeyword(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSNullKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSNumberKeyword(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSNumberKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSObjectKeyword(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSObjectKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSStringKeyword(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSStringKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSSymbolKeyword(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSSymbolKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSUndefinedKeyword(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSUndefinedKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSUnknownKeyword(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSUnknownKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSVoidKeyword(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSVoidKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSThisType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSThisType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSFunctionType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSFunctionType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSConstructorType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSConstructorType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSTypeReference(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSTypeReference\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSTypePredicate(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSTypePredicate\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSTypeQuery(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSTypeQuery\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSTypeLiteral(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSTypeLiteral\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSArrayType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSArrayType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSTupleType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSTupleType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSOptionalType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSOptionalType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSRestType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSRestType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSNamedTupleMember(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSNamedTupleMember\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSUnionType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSUnionType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSIntersectionType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSIntersectionType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSConditionalType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSConditionalType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSInferType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSInferType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSParenthesizedType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSParenthesizedType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSTypeOperator(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSTypeOperator\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSIndexedAccessType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSIndexedAccessType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSMappedType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSMappedType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSLiteralType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSLiteralType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSExpressionWithTypeArguments(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSExpressionWithTypeArguments\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSInterfaceDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSInterfaceDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSInterfaceBody(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSInterfaceBody\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSTypeAliasDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSTypeAliasDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSAsExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSAsExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSTypeAssertion(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSTypeAssertion\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSEnumDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSEnumDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSEnumMember(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSEnumMember\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSModuleDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSModuleDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSModuleBlock(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSModuleBlock\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSImportType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSImportType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSImportEqualsDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSImportEqualsDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSExternalModuleReference(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSExternalModuleReference\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSNonNullExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSNonNullExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSExportAssignment(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSExportAssignment\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSNamespaceExportDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSNamespaceExportDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSTypeParameterInstantiation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSTypeParameterInstantiation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSTypeParameterDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSTypeParameterDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSTypeParameter(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSTypeParameter\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isStandardized(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"ArrayExpression\" === nodeType || \"AssignmentExpression\" === nodeType || \"BinaryExpression\" === nodeType || \"InterpreterDirective\" === nodeType || \"Directive\" === nodeType || \"DirectiveLiteral\" === nodeType || \"BlockStatement\" === nodeType || \"BreakStatement\" === nodeType || \"CallExpression\" === nodeType || \"CatchClause\" === nodeType || \"ConditionalExpression\" === nodeType || \"ContinueStatement\" === nodeType || \"DebuggerStatement\" === nodeType || \"DoWhileStatement\" === nodeType || \"EmptyStatement\" === nodeType || \"ExpressionStatement\" === nodeType || \"File\" === nodeType || \"ForInStatement\" === nodeType || \"ForStatement\" === nodeType || \"FunctionDeclaration\" === nodeType || \"FunctionExpression\" === nodeType || \"Identifier\" === nodeType || \"IfStatement\" === nodeType || \"LabeledStatement\" === nodeType || \"StringLiteral\" === nodeType || \"NumericLiteral\" === nodeType || \"NullLiteral\" === nodeType || \"BooleanLiteral\" === nodeType || \"RegExpLiteral\" === nodeType || \"LogicalExpression\" === nodeType || \"MemberExpression\" === nodeType || \"NewExpression\" === nodeType || \"Program\" === nodeType || \"ObjectExpression\" === nodeType || \"ObjectMethod\" === nodeType || \"ObjectProperty\" === nodeType || \"RestElement\" === nodeType || \"ReturnStatement\" === nodeType || \"SequenceExpression\" === nodeType || \"ParenthesizedExpression\" === nodeType || \"SwitchCase\" === nodeType || \"SwitchStatement\" === nodeType || \"ThisExpression\" === nodeType || \"ThrowStatement\" === nodeType || \"TryStatement\" === nodeType || \"UnaryExpression\" === nodeType || \"UpdateExpression\" === nodeType || \"VariableDeclaration\" === nodeType || \"VariableDeclarator\" === nodeType || \"WhileStatement\" === nodeType || \"WithStatement\" === nodeType || \"AssignmentPattern\" === nodeType || \"ArrayPattern\" === nodeType || \"ArrowFunctionExpression\" === nodeType || \"ClassBody\" === nodeType || \"ClassExpression\" === nodeType || \"ClassDeclaration\" === nodeType || \"ExportAllDeclaration\" === nodeType || \"ExportDefaultDeclaration\" === nodeType || \"ExportNamedDeclaration\" === nodeType || \"ExportSpecifier\" === nodeType || \"ForOfStatement\" === nodeType || \"ImportDeclaration\" === nodeType || \"ImportDefaultSpecifier\" === nodeType || \"ImportNamespaceSpecifier\" === nodeType || \"ImportSpecifier\" === nodeType || \"MetaProperty\" === nodeType || \"ClassMethod\" === nodeType || \"ObjectPattern\" === nodeType || \"SpreadElement\" === nodeType || \"Super\" === nodeType || \"TaggedTemplateExpression\" === nodeType || \"TemplateElement\" === nodeType || \"TemplateLiteral\" === nodeType || \"YieldExpression\" === nodeType || \"AwaitExpression\" === nodeType || \"Import\" === nodeType || \"BigIntLiteral\" === nodeType || \"ExportNamespaceSpecifier\" === nodeType || \"OptionalMemberExpression\" === nodeType || \"OptionalCallExpression\" === nodeType || \"ClassProperty\" === nodeType || \"ClassPrivateProperty\" === nodeType || \"ClassPrivateMethod\" === nodeType || \"PrivateName\" === nodeType || \"StaticBlock\" === nodeType || nodeType === \"Placeholder\" && (\"Identifier\" === node.expectedNode || \"StringLiteral\" === node.expectedNode || \"BlockStatement\" === node.expectedNode || \"ClassBody\" === node.expectedNode)) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"ArrayExpression\" === nodeType || \"AssignmentExpression\" === nodeType || \"BinaryExpression\" === nodeType || \"CallExpression\" === nodeType || \"ConditionalExpression\" === nodeType || \"FunctionExpression\" === nodeType || \"Identifier\" === nodeType || \"StringLiteral\" === nodeType || \"NumericLiteral\" === nodeType || \"NullLiteral\" === nodeType || \"BooleanLiteral\" === nodeType || \"RegExpLiteral\" === nodeType || \"LogicalExpression\" === nodeType || \"MemberExpression\" === nodeType || \"NewExpression\" === nodeType || \"ObjectExpression\" === nodeType || \"SequenceExpression\" === nodeType || \"ParenthesizedExpression\" === nodeType || \"ThisExpression\" === nodeType || \"UnaryExpression\" === nodeType || \"UpdateExpression\" === nodeType || \"ArrowFunctionExpression\" === nodeType || \"ClassExpression\" === nodeType || \"MetaProperty\" === nodeType || \"Super\" === nodeType || \"TaggedTemplateExpression\" === nodeType || \"TemplateLiteral\" === nodeType || \"YieldExpression\" === nodeType || \"AwaitExpression\" === nodeType || \"Import\" === nodeType || \"BigIntLiteral\" === nodeType || \"OptionalMemberExpression\" === nodeType || \"OptionalCallExpression\" === nodeType || \"TypeCastExpression\" === nodeType || \"JSXElement\" === nodeType || \"JSXFragment\" === nodeType || \"BindExpression\" === nodeType || \"DoExpression\" === nodeType || \"RecordExpression\" === nodeType || \"TupleExpression\" === nodeType || \"DecimalLiteral\" === nodeType || \"ModuleExpression\" === nodeType || \"TopicReference\" === nodeType || \"PipelineTopicExpression\" === nodeType || \"PipelineBareFunction\" === nodeType || \"PipelinePrimaryTopicReference\" === nodeType || \"TSAsExpression\" === nodeType || \"TSTypeAssertion\" === nodeType || \"TSNonNullExpression\" === nodeType || nodeType === \"Placeholder\" && (\"Expression\" === node.expectedNode || \"Identifier\" === node.expectedNode || \"StringLiteral\" === node.expectedNode)) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isBinary(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"BinaryExpression\" === nodeType || \"LogicalExpression\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isScopable(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"BlockStatement\" === nodeType || \"CatchClause\" === nodeType || \"DoWhileStatement\" === nodeType || \"ForInStatement\" === nodeType || \"ForStatement\" === nodeType || \"FunctionDeclaration\" === nodeType || \"FunctionExpression\" === nodeType || \"Program\" === nodeType || \"ObjectMethod\" === nodeType || \"SwitchStatement\" === nodeType || \"WhileStatement\" === nodeType || \"ArrowFunctionExpression\" === nodeType || \"ClassExpression\" === nodeType || \"ClassDeclaration\" === nodeType || \"ForOfStatement\" === nodeType || \"ClassMethod\" === nodeType || \"ClassPrivateMethod\" === nodeType || \"StaticBlock\" === nodeType || \"TSModuleBlock\" === nodeType || nodeType === \"Placeholder\" && \"BlockStatement\" === node.expectedNode) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isBlockParent(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"BlockStatement\" === nodeType || \"CatchClause\" === nodeType || \"DoWhileStatement\" === nodeType || \"ForInStatement\" === nodeType || \"ForStatement\" === nodeType || \"FunctionDeclaration\" === nodeType || \"FunctionExpression\" === nodeType || \"Program\" === nodeType || \"ObjectMethod\" === nodeType || \"SwitchStatement\" === nodeType || \"WhileStatement\" === nodeType || \"ArrowFunctionExpression\" === nodeType || \"ForOfStatement\" === nodeType || \"ClassMethod\" === nodeType || \"ClassPrivateMethod\" === nodeType || \"StaticBlock\" === nodeType || \"TSModuleBlock\" === nodeType || nodeType === \"Placeholder\" && \"BlockStatement\" === node.expectedNode) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isBlock(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"BlockStatement\" === nodeType || \"Program\" === nodeType || \"TSModuleBlock\" === nodeType || nodeType === \"Placeholder\" && \"BlockStatement\" === node.expectedNode) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"BlockStatement\" === nodeType || \"BreakStatement\" === nodeType || \"ContinueStatement\" === nodeType || \"DebuggerStatement\" === nodeType || \"DoWhileStatement\" === nodeType || \"EmptyStatement\" === nodeType || \"ExpressionStatement\" === nodeType || \"ForInStatement\" === nodeType || \"ForStatement\" === nodeType || \"FunctionDeclaration\" === nodeType || \"IfStatement\" === nodeType || \"LabeledStatement\" === nodeType || \"ReturnStatement\" === nodeType || \"SwitchStatement\" === nodeType || \"ThrowStatement\" === nodeType || \"TryStatement\" === nodeType || \"VariableDeclaration\" === nodeType || \"WhileStatement\" === nodeType || \"WithStatement\" === nodeType || \"ClassDeclaration\" === nodeType || \"ExportAllDeclaration\" === nodeType || \"ExportDefaultDeclaration\" === nodeType || \"ExportNamedDeclaration\" === nodeType || \"ForOfStatement\" === nodeType || \"ImportDeclaration\" === nodeType || \"DeclareClass\" === nodeType || \"DeclareFunction\" === nodeType || \"DeclareInterface\" === nodeType || \"DeclareModule\" === nodeType || \"DeclareModuleExports\" === nodeType || \"DeclareTypeAlias\" === nodeType || \"DeclareOpaqueType\" === nodeType || \"DeclareVariable\" === nodeType || \"DeclareExportDeclaration\" === nodeType || \"DeclareExportAllDeclaration\" === nodeType || \"InterfaceDeclaration\" === nodeType || \"OpaqueType\" === nodeType || \"TypeAlias\" === nodeType || \"EnumDeclaration\" === nodeType || \"TSDeclareFunction\" === nodeType || \"TSInterfaceDeclaration\" === nodeType || \"TSTypeAliasDeclaration\" === nodeType || \"TSEnumDeclaration\" === nodeType || \"TSModuleDeclaration\" === nodeType || \"TSImportEqualsDeclaration\" === nodeType || \"TSExportAssignment\" === nodeType || \"TSNamespaceExportDeclaration\" === nodeType || nodeType === \"Placeholder\" && (\"Statement\" === node.expectedNode || \"Declaration\" === node.expectedNode || \"BlockStatement\" === node.expectedNode)) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTerminatorless(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"BreakStatement\" === nodeType || \"ContinueStatement\" === nodeType || \"ReturnStatement\" === nodeType || \"ThrowStatement\" === nodeType || \"YieldExpression\" === nodeType || \"AwaitExpression\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isCompletionStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"BreakStatement\" === nodeType || \"ContinueStatement\" === nodeType || \"ReturnStatement\" === nodeType || \"ThrowStatement\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isConditional(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"ConditionalExpression\" === nodeType || \"IfStatement\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isLoop(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"DoWhileStatement\" === nodeType || \"ForInStatement\" === nodeType || \"ForStatement\" === nodeType || \"WhileStatement\" === nodeType || \"ForOfStatement\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isWhile(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"DoWhileStatement\" === nodeType || \"WhileStatement\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isExpressionWrapper(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"ExpressionStatement\" === nodeType || \"ParenthesizedExpression\" === nodeType || \"TypeCastExpression\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isFor(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"ForInStatement\" === nodeType || \"ForStatement\" === nodeType || \"ForOfStatement\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isForXStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"ForInStatement\" === nodeType || \"ForOfStatement\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isFunction(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"FunctionDeclaration\" === nodeType || \"FunctionExpression\" === nodeType || \"ObjectMethod\" === nodeType || \"ArrowFunctionExpression\" === nodeType || \"ClassMethod\" === nodeType || \"ClassPrivateMethod\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isFunctionParent(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"FunctionDeclaration\" === nodeType || \"FunctionExpression\" === nodeType || \"ObjectMethod\" === nodeType || \"ArrowFunctionExpression\" === nodeType || \"ClassMethod\" === nodeType || \"ClassPrivateMethod\" === nodeType || \"StaticBlock\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isPureish(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"FunctionDeclaration\" === nodeType || \"FunctionExpression\" === nodeType || \"StringLiteral\" === nodeType || \"NumericLiteral\" === nodeType || \"NullLiteral\" === nodeType || \"BooleanLiteral\" === nodeType || \"RegExpLiteral\" === nodeType || \"ArrowFunctionExpression\" === nodeType || \"BigIntLiteral\" === nodeType || \"DecimalLiteral\" === nodeType || nodeType === \"Placeholder\" && \"StringLiteral\" === node.expectedNode) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"FunctionDeclaration\" === nodeType || \"VariableDeclaration\" === nodeType || \"ClassDeclaration\" === nodeType || \"ExportAllDeclaration\" === nodeType || \"ExportDefaultDeclaration\" === nodeType || \"ExportNamedDeclaration\" === nodeType || \"ImportDeclaration\" === nodeType || \"DeclareClass\" === nodeType || \"DeclareFunction\" === nodeType || \"DeclareInterface\" === nodeType || \"DeclareModule\" === nodeType || \"DeclareModuleExports\" === nodeType || \"DeclareTypeAlias\" === nodeType || \"DeclareOpaqueType\" === nodeType || \"DeclareVariable\" === nodeType || \"DeclareExportDeclaration\" === nodeType || \"DeclareExportAllDeclaration\" === nodeType || \"InterfaceDeclaration\" === nodeType || \"OpaqueType\" === nodeType || \"TypeAlias\" === nodeType || \"EnumDeclaration\" === nodeType || \"TSDeclareFunction\" === nodeType || \"TSInterfaceDeclaration\" === nodeType || \"TSTypeAliasDeclaration\" === nodeType || \"TSEnumDeclaration\" === nodeType || \"TSModuleDeclaration\" === nodeType || nodeType === \"Placeholder\" && \"Declaration\" === node.expectedNode) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isPatternLike(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"Identifier\" === nodeType || \"RestElement\" === nodeType || \"AssignmentPattern\" === nodeType || \"ArrayPattern\" === nodeType || \"ObjectPattern\" === nodeType || nodeType === \"Placeholder\" && (\"Pattern\" === node.expectedNode || \"Identifier\" === node.expectedNode)) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isLVal(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"Identifier\" === nodeType || \"MemberExpression\" === nodeType || \"RestElement\" === nodeType || \"AssignmentPattern\" === nodeType || \"ArrayPattern\" === nodeType || \"ObjectPattern\" === nodeType || \"TSParameterProperty\" === nodeType || nodeType === \"Placeholder\" && (\"Pattern\" === node.expectedNode || \"Identifier\" === node.expectedNode)) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSEntityName(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"Identifier\" === nodeType || \"TSQualifiedName\" === nodeType || nodeType === \"Placeholder\" && \"Identifier\" === node.expectedNode) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isLiteral(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"StringLiteral\" === nodeType || \"NumericLiteral\" === nodeType || \"NullLiteral\" === nodeType || \"BooleanLiteral\" === nodeType || \"RegExpLiteral\" === nodeType || \"TemplateLiteral\" === nodeType || \"BigIntLiteral\" === nodeType || \"DecimalLiteral\" === nodeType || nodeType === \"Placeholder\" && \"StringLiteral\" === node.expectedNode) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isImmutable(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"StringLiteral\" === nodeType || \"NumericLiteral\" === nodeType || \"NullLiteral\" === nodeType || \"BooleanLiteral\" === nodeType || \"BigIntLiteral\" === nodeType || \"JSXAttribute\" === nodeType || \"JSXClosingElement\" === nodeType || \"JSXElement\" === nodeType || \"JSXExpressionContainer\" === nodeType || \"JSXSpreadChild\" === nodeType || \"JSXOpeningElement\" === nodeType || \"JSXText\" === nodeType || \"JSXFragment\" === nodeType || \"JSXOpeningFragment\" === nodeType || \"JSXClosingFragment\" === nodeType || \"DecimalLiteral\" === nodeType || nodeType === \"Placeholder\" && \"StringLiteral\" === node.expectedNode) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isUserWhitespacable(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"ObjectMethod\" === nodeType || \"ObjectProperty\" === nodeType || \"ObjectTypeInternalSlot\" === nodeType || \"ObjectTypeCallProperty\" === nodeType || \"ObjectTypeIndexer\" === nodeType || \"ObjectTypeProperty\" === nodeType || \"ObjectTypeSpreadProperty\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isMethod(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"ObjectMethod\" === nodeType || \"ClassMethod\" === nodeType || \"ClassPrivateMethod\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isObjectMember(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"ObjectMethod\" === nodeType || \"ObjectProperty\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isProperty(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"ObjectProperty\" === nodeType || \"ClassProperty\" === nodeType || \"ClassPrivateProperty\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isUnaryLike(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"UnaryExpression\" === nodeType || \"SpreadElement\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isPattern(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"AssignmentPattern\" === nodeType || \"ArrayPattern\" === nodeType || \"ObjectPattern\" === nodeType || nodeType === \"Placeholder\" && \"Pattern\" === node.expectedNode) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isClass(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"ClassExpression\" === nodeType || \"ClassDeclaration\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isModuleDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"ExportAllDeclaration\" === nodeType || \"ExportDefaultDeclaration\" === nodeType || \"ExportNamedDeclaration\" === nodeType || \"ImportDeclaration\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isExportDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"ExportAllDeclaration\" === nodeType || \"ExportDefaultDeclaration\" === nodeType || \"ExportNamedDeclaration\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isModuleSpecifier(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"ExportSpecifier\" === nodeType || \"ImportDefaultSpecifier\" === nodeType || \"ImportNamespaceSpecifier\" === nodeType || \"ImportSpecifier\" === nodeType || \"ExportNamespaceSpecifier\" === nodeType || \"ExportDefaultSpecifier\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isPrivate(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"ClassPrivateProperty\" === nodeType || \"ClassPrivateMethod\" === nodeType || \"PrivateName\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isFlow(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"AnyTypeAnnotation\" === nodeType || \"ArrayTypeAnnotation\" === nodeType || \"BooleanTypeAnnotation\" === nodeType || \"BooleanLiteralTypeAnnotation\" === nodeType || \"NullLiteralTypeAnnotation\" === nodeType || \"ClassImplements\" === nodeType || \"DeclareClass\" === nodeType || \"DeclareFunction\" === nodeType || \"DeclareInterface\" === nodeType || \"DeclareModule\" === nodeType || \"DeclareModuleExports\" === nodeType || \"DeclareTypeAlias\" === nodeType || \"DeclareOpaqueType\" === nodeType || \"DeclareVariable\" === nodeType || \"DeclareExportDeclaration\" === nodeType || \"DeclareExportAllDeclaration\" === nodeType || \"DeclaredPredicate\" === nodeType || \"ExistsTypeAnnotation\" === nodeType || \"FunctionTypeAnnotation\" === nodeType || \"FunctionTypeParam\" === nodeType || \"GenericTypeAnnotation\" === nodeType || \"InferredPredicate\" === nodeType || \"InterfaceExtends\" === nodeType || \"InterfaceDeclaration\" === nodeType || \"InterfaceTypeAnnotation\" === nodeType || \"IntersectionTypeAnnotation\" === nodeType || \"MixedTypeAnnotation\" === nodeType || \"EmptyTypeAnnotation\" === nodeType || \"NullableTypeAnnotation\" === nodeType || \"NumberLiteralTypeAnnotation\" === nodeType || \"NumberTypeAnnotation\" === nodeType || \"ObjectTypeAnnotation\" === nodeType || \"ObjectTypeInternalSlot\" === nodeType || \"ObjectTypeCallProperty\" === nodeType || \"ObjectTypeIndexer\" === nodeType || \"ObjectTypeProperty\" === nodeType || \"ObjectTypeSpreadProperty\" === nodeType || \"OpaqueType\" === nodeType || \"QualifiedTypeIdentifier\" === nodeType || \"StringLiteralTypeAnnotation\" === nodeType || \"StringTypeAnnotation\" === nodeType || \"SymbolTypeAnnotation\" === nodeType || \"ThisTypeAnnotation\" === nodeType || \"TupleTypeAnnotation\" === nodeType || \"TypeofTypeAnnotation\" === nodeType || \"TypeAlias\" === nodeType || \"TypeAnnotation\" === nodeType || \"TypeCastExpression\" === nodeType || \"TypeParameter\" === nodeType || \"TypeParameterDeclaration\" === nodeType || \"TypeParameterInstantiation\" === nodeType || \"UnionTypeAnnotation\" === nodeType || \"Variance\" === nodeType || \"VoidTypeAnnotation\" === nodeType || \"EnumDeclaration\" === nodeType || \"EnumBooleanBody\" === nodeType || \"EnumNumberBody\" === nodeType || \"EnumStringBody\" === nodeType || \"EnumSymbolBody\" === nodeType || \"EnumBooleanMember\" === nodeType || \"EnumNumberMember\" === nodeType || \"EnumStringMember\" === nodeType || \"EnumDefaultedMember\" === nodeType || \"IndexedAccessType\" === nodeType || \"OptionalIndexedAccessType\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isFlowType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"AnyTypeAnnotation\" === nodeType || \"ArrayTypeAnnotation\" === nodeType || \"BooleanTypeAnnotation\" === nodeType || \"BooleanLiteralTypeAnnotation\" === nodeType || \"NullLiteralTypeAnnotation\" === nodeType || \"ExistsTypeAnnotation\" === nodeType || \"FunctionTypeAnnotation\" === nodeType || \"GenericTypeAnnotation\" === nodeType || \"InterfaceTypeAnnotation\" === nodeType || \"IntersectionTypeAnnotation\" === nodeType || \"MixedTypeAnnotation\" === nodeType || \"EmptyTypeAnnotation\" === nodeType || \"NullableTypeAnnotation\" === nodeType || \"NumberLiteralTypeAnnotation\" === nodeType || \"NumberTypeAnnotation\" === nodeType || \"ObjectTypeAnnotation\" === nodeType || \"StringLiteralTypeAnnotation\" === nodeType || \"StringTypeAnnotation\" === nodeType || \"SymbolTypeAnnotation\" === nodeType || \"ThisTypeAnnotation\" === nodeType || \"TupleTypeAnnotation\" === nodeType || \"TypeofTypeAnnotation\" === nodeType || \"UnionTypeAnnotation\" === nodeType || \"VoidTypeAnnotation\" === nodeType || \"IndexedAccessType\" === nodeType || \"OptionalIndexedAccessType\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isFlowBaseAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"AnyTypeAnnotation\" === nodeType || \"BooleanTypeAnnotation\" === nodeType || \"NullLiteralTypeAnnotation\" === nodeType || \"MixedTypeAnnotation\" === nodeType || \"EmptyTypeAnnotation\" === nodeType || \"NumberTypeAnnotation\" === nodeType || \"StringTypeAnnotation\" === nodeType || \"SymbolTypeAnnotation\" === nodeType || \"ThisTypeAnnotation\" === nodeType || \"VoidTypeAnnotation\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isFlowDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"DeclareClass\" === nodeType || \"DeclareFunction\" === nodeType || \"DeclareInterface\" === nodeType || \"DeclareModule\" === nodeType || \"DeclareModuleExports\" === nodeType || \"DeclareTypeAlias\" === nodeType || \"DeclareOpaqueType\" === nodeType || \"DeclareVariable\" === nodeType || \"DeclareExportDeclaration\" === nodeType || \"DeclareExportAllDeclaration\" === nodeType || \"InterfaceDeclaration\" === nodeType || \"OpaqueType\" === nodeType || \"TypeAlias\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isFlowPredicate(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"DeclaredPredicate\" === nodeType || \"InferredPredicate\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isEnumBody(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"EnumBooleanBody\" === nodeType || \"EnumNumberBody\" === nodeType || \"EnumStringBody\" === nodeType || \"EnumSymbolBody\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isEnumMember(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"EnumBooleanMember\" === nodeType || \"EnumNumberMember\" === nodeType || \"EnumStringMember\" === nodeType || \"EnumDefaultedMember\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSX(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"JSXAttribute\" === nodeType || \"JSXClosingElement\" === nodeType || \"JSXElement\" === nodeType || \"JSXEmptyExpression\" === nodeType || \"JSXExpressionContainer\" === nodeType || \"JSXSpreadChild\" === nodeType || \"JSXIdentifier\" === nodeType || \"JSXMemberExpression\" === nodeType || \"JSXNamespacedName\" === nodeType || \"JSXOpeningElement\" === nodeType || \"JSXSpreadAttribute\" === nodeType || \"JSXText\" === nodeType || \"JSXFragment\" === nodeType || \"JSXOpeningFragment\" === nodeType || \"JSXClosingFragment\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isMiscellaneous(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"Noop\" === nodeType || \"Placeholder\" === nodeType || \"V8IntrinsicIdentifier\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTypeScript(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"TSParameterProperty\" === nodeType || \"TSDeclareFunction\" === nodeType || \"TSDeclareMethod\" === nodeType || \"TSQualifiedName\" === nodeType || \"TSCallSignatureDeclaration\" === nodeType || \"TSConstructSignatureDeclaration\" === nodeType || \"TSPropertySignature\" === nodeType || \"TSMethodSignature\" === nodeType || \"TSIndexSignature\" === nodeType || \"TSAnyKeyword\" === nodeType || \"TSBooleanKeyword\" === nodeType || \"TSBigIntKeyword\" === nodeType || \"TSIntrinsicKeyword\" === nodeType || \"TSNeverKeyword\" === nodeType || \"TSNullKeyword\" === nodeType || \"TSNumberKeyword\" === nodeType || \"TSObjectKeyword\" === nodeType || \"TSStringKeyword\" === nodeType || \"TSSymbolKeyword\" === nodeType || \"TSUndefinedKeyword\" === nodeType || \"TSUnknownKeyword\" === nodeType || \"TSVoidKeyword\" === nodeType || \"TSThisType\" === nodeType || \"TSFunctionType\" === nodeType || \"TSConstructorType\" === nodeType || \"TSTypeReference\" === nodeType || \"TSTypePredicate\" === nodeType || \"TSTypeQuery\" === nodeType || \"TSTypeLiteral\" === nodeType || \"TSArrayType\" === nodeType || \"TSTupleType\" === nodeType || \"TSOptionalType\" === nodeType || \"TSRestType\" === nodeType || \"TSNamedTupleMember\" === nodeType || \"TSUnionType\" === nodeType || \"TSIntersectionType\" === nodeType || \"TSConditionalType\" === nodeType || \"TSInferType\" === nodeType || \"TSParenthesizedType\" === nodeType || \"TSTypeOperator\" === nodeType || \"TSIndexedAccessType\" === nodeType || \"TSMappedType\" === nodeType || \"TSLiteralType\" === nodeType || \"TSExpressionWithTypeArguments\" === nodeType || \"TSInterfaceDeclaration\" === nodeType || \"TSInterfaceBody\" === nodeType || \"TSTypeAliasDeclaration\" === nodeType || \"TSAsExpression\" === nodeType || \"TSTypeAssertion\" === nodeType || \"TSEnumDeclaration\" === nodeType || \"TSEnumMember\" === nodeType || \"TSModuleDeclaration\" === nodeType || \"TSModuleBlock\" === nodeType || \"TSImportType\" === nodeType || \"TSImportEqualsDeclaration\" === nodeType || \"TSExternalModuleReference\" === nodeType || \"TSNonNullExpression\" === nodeType || \"TSExportAssignment\" === nodeType || \"TSNamespaceExportDeclaration\" === nodeType || \"TSTypeAnnotation\" === nodeType || \"TSTypeParameterInstantiation\" === nodeType || \"TSTypeParameterDeclaration\" === nodeType || \"TSTypeParameter\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSTypeElement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"TSCallSignatureDeclaration\" === nodeType || \"TSConstructSignatureDeclaration\" === nodeType || \"TSPropertySignature\" === nodeType || \"TSMethodSignature\" === nodeType || \"TSIndexSignature\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"TSAnyKeyword\" === nodeType || \"TSBooleanKeyword\" === nodeType || \"TSBigIntKeyword\" === nodeType || \"TSIntrinsicKeyword\" === nodeType || \"TSNeverKeyword\" === nodeType || \"TSNullKeyword\" === nodeType || \"TSNumberKeyword\" === nodeType || \"TSObjectKeyword\" === nodeType || \"TSStringKeyword\" === nodeType || \"TSSymbolKeyword\" === nodeType || \"TSUndefinedKeyword\" === nodeType || \"TSUnknownKeyword\" === nodeType || \"TSVoidKeyword\" === nodeType || \"TSThisType\" === nodeType || \"TSFunctionType\" === nodeType || \"TSConstructorType\" === nodeType || \"TSTypeReference\" === nodeType || \"TSTypePredicate\" === nodeType || \"TSTypeQuery\" === nodeType || \"TSTypeLiteral\" === nodeType || \"TSArrayType\" === nodeType || \"TSTupleType\" === nodeType || \"TSOptionalType\" === nodeType || \"TSRestType\" === nodeType || \"TSUnionType\" === nodeType || \"TSIntersectionType\" === nodeType || \"TSConditionalType\" === nodeType || \"TSInferType\" === nodeType || \"TSParenthesizedType\" === nodeType || \"TSTypeOperator\" === nodeType || \"TSIndexedAccessType\" === nodeType || \"TSMappedType\" === nodeType || \"TSLiteralType\" === nodeType || \"TSExpressionWithTypeArguments\" === nodeType || \"TSImportType\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSBaseType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (\"TSAnyKeyword\" === nodeType || \"TSBooleanKeyword\" === nodeType || \"TSBigIntKeyword\" === nodeType || \"TSIntrinsicKeyword\" === nodeType || \"TSNeverKeyword\" === nodeType || \"TSNullKeyword\" === nodeType || \"TSNumberKeyword\" === nodeType || \"TSObjectKeyword\" === nodeType || \"TSStringKeyword\" === nodeType || \"TSSymbolKeyword\" === nodeType || \"TSUndefinedKeyword\" === nodeType || \"TSUnknownKeyword\" === nodeType || \"TSVoidKeyword\" === nodeType || \"TSThisType\" === nodeType || \"TSLiteralType\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isNumberLiteral(node, opts) {\n  console.trace(\"The node type NumberLiteral has been renamed to NumericLiteral\");\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"NumberLiteral\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isRegexLiteral(node, opts) {\n  console.trace(\"The node type RegexLiteral has been renamed to RegExpLiteral\");\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"RegexLiteral\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isRestProperty(node, opts) {\n  console.trace(\"The node type RestProperty has been renamed to RestElement\");\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"RestProperty\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isSpreadProperty(node, opts) {\n  console.trace(\"The node type SpreadProperty has been renamed to SpreadElement\");\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"SpreadProperty\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}"]},"metadata":{},"sourceType":"script"}