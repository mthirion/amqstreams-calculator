{"ast":null,"code":"var _jsxFileName = \"/development/workspace/internal/ui/myreact-kafka/src/KafkaClusterDetails.js\";\nimport './KafkaClusterDetails.css';\nimport React, { Component, useState, useEffect, setState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass KafkaClusterDetails extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.state.resp_brokercpu = props.broker_cpu;\n    this.state.resp_brokernb = props.broker_nb;\n    this.state.resp_brokermem = props.broker_mem;\n    this.state.resp_storage = props.cluster_sto;\n    console.log(\"IN CPU = \" + this.state.resp_brokercpu);\n  }\n\n  componentDidMount() {}\n  /** \n     render() is the main method of the component\n     it is where the page html is displayed\n     with the binding to the functions that will react to page events\n  */\n\n\n  render() {\n    const broker_cpu = this.props.broker_cpu; // some logic can be added here to compute dynamic value before the return method is called\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title\",\n        children: \"Red Hat AMQStreams target cluster details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: this.props.broker_cpu\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 11\n    }, this);\n  }\n\n}\n\nexport default KafkaClusterDetails;","map":{"version":3,"sources":["/development/workspace/internal/ui/myreact-kafka/src/KafkaClusterDetails.js"],"names":["React","Component","useState","useEffect","setState","KafkaClusterDetails","constructor","props","state","resp_brokercpu","broker_cpu","resp_brokernb","broker_nb","resp_brokermem","broker_mem","resp_storage","cluster_sto","console","log","componentDidMount","render"],"mappings":";AAAA,OAAO,2BAAP;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,SAArC,EAAgDC,QAAhD,QAAiE,OAAjE;;;AAEA,MAAMC,mBAAN,SAAkCJ,SAAlC,CAA4C;AAE1CK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa,EAAb;AAEA,SAAKA,KAAL,CAAWC,cAAX,GAA0BF,KAAK,CAACG,UAAhC;AACA,SAAKF,KAAL,CAAWG,aAAX,GAAyBJ,KAAK,CAACK,SAA/B;AACA,SAAKJ,KAAL,CAAWK,cAAX,GAA0BN,KAAK,CAACO,UAAhC;AACA,SAAKN,KAAL,CAAWO,YAAX,GAAwBR,KAAK,CAACS,WAA9B;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAc,KAAKV,KAAL,CAAWC,cAArC;AACD;;AAEDU,EAAAA,iBAAiB,GAAG,CAEnB;AAGD;AACF;AACA;AACA;AACA;;;AACEC,EAAAA,MAAM,GAAG;AAEP,UAAMV,UAAU,GAAG,KAAKH,KAAL,CAAWG,UAA9B,CAFO,CAIP;;AAEI,wBAEE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACE;AAAI,QAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAGE;AAAA,kBAAK,KAAKH,KAAL,CAAWG;AAAhB;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AASL;;AAvCyC;;AA4C5C,eAAeL,mBAAf","sourcesContent":["import './KafkaClusterDetails.css';\n\nimport React, { Component, useState, useEffect, setState  } from 'react';\n\nclass KafkaClusterDetails extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {}\n\n    this.state.resp_brokercpu=props.broker_cpu;\n    this.state.resp_brokernb=props.broker_nb;\n    this.state.resp_brokermem=props.broker_mem;\n    this.state.resp_storage=props.cluster_sto;\n\n    console.log(\"IN CPU = \" + this.state.resp_brokercpu);\n  }\n\n  componentDidMount() {\n    \n  }\n\n\n  /** \n     render() is the main method of the component\n     it is where the page html is displayed\n     with the binding to the functions that will react to page events\n  */\n  render() {\n\n    const broker_cpu = this.props.broker_cpu;\n\n    // some logic can be added here to compute dynamic value before the return method is called\n\n        return (\n  \n          <div className=\"container\">\n            <h1 className=\"title\">Red Hat AMQStreams target cluster details</h1>\n\n            <h1>{this.props.broker_cpu}</h1>  \n          </div>\n       )\n  \n  }\n\n\n} \n\nexport default KafkaClusterDetails;"]},"metadata":{},"sourceType":"module"}