{"ast":null,"code":"\"use strict\";\n\nvar _utils = require(\"./utils\");\n\nvar _core = require(\"./core\");\n\nvar _is = require(\"../validators/is\");\n\nconst defineType = (0, _utils.defineAliasedType)(\"TypeScript\");\nconst bool = (0, _utils.assertValueType)(\"boolean\");\nconst tSFunctionTypeAnnotationCommon = {\n  returnType: {\n    validate: (0, _utils.assertNodeType)(\"TSTypeAnnotation\", \"Noop\"),\n    optional: true\n  },\n  typeParameters: {\n    validate: (0, _utils.assertNodeType)(\"TSTypeParameterDeclaration\", \"Noop\"),\n    optional: true\n  }\n};\ndefineType(\"TSParameterProperty\", {\n  aliases: [\"LVal\"],\n  visitor: [\"parameter\"],\n  fields: {\n    accessibility: {\n      validate: (0, _utils.assertOneOf)(\"public\", \"private\", \"protected\"),\n      optional: true\n    },\n    readonly: {\n      validate: (0, _utils.assertValueType)(\"boolean\"),\n      optional: true\n    },\n    parameter: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\", \"AssignmentPattern\")\n    },\n    override: {\n      validate: (0, _utils.assertValueType)(\"boolean\"),\n      optional: true\n    },\n    decorators: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"Decorator\"))),\n      optional: true\n    }\n  }\n});\ndefineType(\"TSDeclareFunction\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"typeParameters\", \"params\", \"returnType\"],\n  fields: Object.assign({}, _core.functionDeclarationCommon, tSFunctionTypeAnnotationCommon)\n});\ndefineType(\"TSDeclareMethod\", {\n  visitor: [\"decorators\", \"key\", \"typeParameters\", \"params\", \"returnType\"],\n  fields: Object.assign({}, _core.classMethodOrDeclareMethodCommon, tSFunctionTypeAnnotationCommon)\n});\ndefineType(\"TSQualifiedName\", {\n  aliases: [\"TSEntityName\"],\n  visitor: [\"left\", \"right\"],\n  fields: {\n    left: (0, _utils.validateType)(\"TSEntityName\"),\n    right: (0, _utils.validateType)(\"Identifier\")\n  }\n});\nconst signatureDeclarationCommon = {\n  typeParameters: (0, _utils.validateOptionalType)(\"TSTypeParameterDeclaration\"),\n  [\"parameters\"]: (0, _utils.validateArrayOfType)([\"Identifier\", \"RestElement\"]),\n  [\"typeAnnotation\"]: (0, _utils.validateOptionalType)(\"TSTypeAnnotation\")\n};\nconst callConstructSignatureDeclaration = {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\"typeParameters\", \"parameters\", \"typeAnnotation\"],\n  fields: signatureDeclarationCommon\n};\ndefineType(\"TSCallSignatureDeclaration\", callConstructSignatureDeclaration);\ndefineType(\"TSConstructSignatureDeclaration\", callConstructSignatureDeclaration);\nconst namedTypeElementCommon = {\n  key: (0, _utils.validateType)(\"Expression\"),\n  computed: (0, _utils.validate)(bool),\n  optional: (0, _utils.validateOptional)(bool)\n};\ndefineType(\"TSPropertySignature\", {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\"key\", \"typeAnnotation\", \"initializer\"],\n  fields: Object.assign({}, namedTypeElementCommon, {\n    readonly: (0, _utils.validateOptional)(bool),\n    typeAnnotation: (0, _utils.validateOptionalType)(\"TSTypeAnnotation\"),\n    initializer: (0, _utils.validateOptionalType)(\"Expression\"),\n    kind: {\n      validate: (0, _utils.assertOneOf)(\"get\", \"set\")\n    }\n  })\n});\ndefineType(\"TSMethodSignature\", {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\"key\", \"typeParameters\", \"parameters\", \"typeAnnotation\"],\n  fields: Object.assign({}, signatureDeclarationCommon, namedTypeElementCommon, {\n    kind: {\n      validate: (0, _utils.assertOneOf)(\"method\", \"get\", \"set\")\n    }\n  })\n});\ndefineType(\"TSIndexSignature\", {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\"parameters\", \"typeAnnotation\"],\n  fields: {\n    readonly: (0, _utils.validateOptional)(bool),\n    static: (0, _utils.validateOptional)(bool),\n    parameters: (0, _utils.validateArrayOfType)(\"Identifier\"),\n    typeAnnotation: (0, _utils.validateOptionalType)(\"TSTypeAnnotation\")\n  }\n});\nconst tsKeywordTypes = [\"TSAnyKeyword\", \"TSBooleanKeyword\", \"TSBigIntKeyword\", \"TSIntrinsicKeyword\", \"TSNeverKeyword\", \"TSNullKeyword\", \"TSNumberKeyword\", \"TSObjectKeyword\", \"TSStringKeyword\", \"TSSymbolKeyword\", \"TSUndefinedKeyword\", \"TSUnknownKeyword\", \"TSVoidKeyword\"];\n\nfor (const type of tsKeywordTypes) {\n  defineType(type, {\n    aliases: [\"TSType\", \"TSBaseType\"],\n    visitor: [],\n    fields: {}\n  });\n}\n\ndefineType(\"TSThisType\", {\n  aliases: [\"TSType\", \"TSBaseType\"],\n  visitor: [],\n  fields: {}\n});\nconst fnOrCtrBase = {\n  aliases: [\"TSType\"],\n  visitor: [\"typeParameters\", \"parameters\", \"typeAnnotation\"]\n};\ndefineType(\"TSFunctionType\", Object.assign({}, fnOrCtrBase, {\n  fields: signatureDeclarationCommon\n}));\ndefineType(\"TSConstructorType\", Object.assign({}, fnOrCtrBase, {\n  fields: Object.assign({}, signatureDeclarationCommon, {\n    abstract: (0, _utils.validateOptional)(bool)\n  })\n}));\ndefineType(\"TSTypeReference\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeName\", \"typeParameters\"],\n  fields: {\n    typeName: (0, _utils.validateType)(\"TSEntityName\"),\n    typeParameters: (0, _utils.validateOptionalType)(\"TSTypeParameterInstantiation\")\n  }\n});\ndefineType(\"TSTypePredicate\", {\n  aliases: [\"TSType\"],\n  visitor: [\"parameterName\", \"typeAnnotation\"],\n  builder: [\"parameterName\", \"typeAnnotation\", \"asserts\"],\n  fields: {\n    parameterName: (0, _utils.validateType)([\"Identifier\", \"TSThisType\"]),\n    typeAnnotation: (0, _utils.validateOptionalType)(\"TSTypeAnnotation\"),\n    asserts: (0, _utils.validateOptional)(bool)\n  }\n});\ndefineType(\"TSTypeQuery\", {\n  aliases: [\"TSType\"],\n  visitor: [\"exprName\"],\n  fields: {\n    exprName: (0, _utils.validateType)([\"TSEntityName\", \"TSImportType\"])\n  }\n});\ndefineType(\"TSTypeLiteral\", {\n  aliases: [\"TSType\"],\n  visitor: [\"members\"],\n  fields: {\n    members: (0, _utils.validateArrayOfType)(\"TSTypeElement\")\n  }\n});\ndefineType(\"TSArrayType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"elementType\"],\n  fields: {\n    elementType: (0, _utils.validateType)(\"TSType\")\n  }\n});\ndefineType(\"TSTupleType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"elementTypes\"],\n  fields: {\n    elementTypes: (0, _utils.validateArrayOfType)([\"TSType\", \"TSNamedTupleMember\"])\n  }\n});\ndefineType(\"TSOptionalType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: (0, _utils.validateType)(\"TSType\")\n  }\n});\ndefineType(\"TSRestType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: (0, _utils.validateType)(\"TSType\")\n  }\n});\ndefineType(\"TSNamedTupleMember\", {\n  visitor: [\"label\", \"elementType\"],\n  builder: [\"label\", \"elementType\", \"optional\"],\n  fields: {\n    label: (0, _utils.validateType)(\"Identifier\"),\n    optional: {\n      validate: bool,\n      default: false\n    },\n    elementType: (0, _utils.validateType)(\"TSType\")\n  }\n});\nconst unionOrIntersection = {\n  aliases: [\"TSType\"],\n  visitor: [\"types\"],\n  fields: {\n    types: (0, _utils.validateArrayOfType)(\"TSType\")\n  }\n};\ndefineType(\"TSUnionType\", unionOrIntersection);\ndefineType(\"TSIntersectionType\", unionOrIntersection);\ndefineType(\"TSConditionalType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"checkType\", \"extendsType\", \"trueType\", \"falseType\"],\n  fields: {\n    checkType: (0, _utils.validateType)(\"TSType\"),\n    extendsType: (0, _utils.validateType)(\"TSType\"),\n    trueType: (0, _utils.validateType)(\"TSType\"),\n    falseType: (0, _utils.validateType)(\"TSType\")\n  }\n});\ndefineType(\"TSInferType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeParameter\"],\n  fields: {\n    typeParameter: (0, _utils.validateType)(\"TSTypeParameter\")\n  }\n});\ndefineType(\"TSParenthesizedType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: (0, _utils.validateType)(\"TSType\")\n  }\n});\ndefineType(\"TSTypeOperator\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    operator: (0, _utils.validate)((0, _utils.assertValueType)(\"string\")),\n    typeAnnotation: (0, _utils.validateType)(\"TSType\")\n  }\n});\ndefineType(\"TSIndexedAccessType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"objectType\", \"indexType\"],\n  fields: {\n    objectType: (0, _utils.validateType)(\"TSType\"),\n    indexType: (0, _utils.validateType)(\"TSType\")\n  }\n});\ndefineType(\"TSMappedType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeParameter\", \"typeAnnotation\", \"nameType\"],\n  fields: {\n    readonly: (0, _utils.validateOptional)(bool),\n    typeParameter: (0, _utils.validateType)(\"TSTypeParameter\"),\n    optional: (0, _utils.validateOptional)(bool),\n    typeAnnotation: (0, _utils.validateOptionalType)(\"TSType\"),\n    nameType: (0, _utils.validateOptionalType)(\"TSType\")\n  }\n});\ndefineType(\"TSLiteralType\", {\n  aliases: [\"TSType\", \"TSBaseType\"],\n  visitor: [\"literal\"],\n  fields: {\n    literal: {\n      validate: function () {\n        const unaryExpression = (0, _utils.assertNodeType)(\"NumericLiteral\", \"BigIntLiteral\");\n        const unaryOperator = (0, _utils.assertOneOf)(\"-\");\n        const literal = (0, _utils.assertNodeType)(\"NumericLiteral\", \"StringLiteral\", \"BooleanLiteral\", \"BigIntLiteral\");\n\n        function validator(parent, key, node) {\n          if ((0, _is.default)(\"UnaryExpression\", node)) {\n            unaryOperator(node, \"operator\", node.operator);\n            unaryExpression(node, \"argument\", node.argument);\n          } else {\n            literal(parent, key, node);\n          }\n        }\n\n        validator.oneOfNodeTypes = [\"NumericLiteral\", \"StringLiteral\", \"BooleanLiteral\", \"BigIntLiteral\", \"UnaryExpression\"];\n        return validator;\n      }()\n    }\n  }\n});\ndefineType(\"TSExpressionWithTypeArguments\", {\n  aliases: [\"TSType\"],\n  visitor: [\"expression\", \"typeParameters\"],\n  fields: {\n    expression: (0, _utils.validateType)(\"TSEntityName\"),\n    typeParameters: (0, _utils.validateOptionalType)(\"TSTypeParameterInstantiation\")\n  }\n});\ndefineType(\"TSInterfaceDeclaration\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"typeParameters\", \"extends\", \"body\"],\n  fields: {\n    declare: (0, _utils.validateOptional)(bool),\n    id: (0, _utils.validateType)(\"Identifier\"),\n    typeParameters: (0, _utils.validateOptionalType)(\"TSTypeParameterDeclaration\"),\n    extends: (0, _utils.validateOptional)((0, _utils.arrayOfType)(\"TSExpressionWithTypeArguments\")),\n    body: (0, _utils.validateType)(\"TSInterfaceBody\")\n  }\n});\ndefineType(\"TSInterfaceBody\", {\n  visitor: [\"body\"],\n  fields: {\n    body: (0, _utils.validateArrayOfType)(\"TSTypeElement\")\n  }\n});\ndefineType(\"TSTypeAliasDeclaration\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"typeParameters\", \"typeAnnotation\"],\n  fields: {\n    declare: (0, _utils.validateOptional)(bool),\n    id: (0, _utils.validateType)(\"Identifier\"),\n    typeParameters: (0, _utils.validateOptionalType)(\"TSTypeParameterDeclaration\"),\n    typeAnnotation: (0, _utils.validateType)(\"TSType\")\n  }\n});\ndefineType(\"TSAsExpression\", {\n  aliases: [\"Expression\"],\n  visitor: [\"expression\", \"typeAnnotation\"],\n  fields: {\n    expression: (0, _utils.validateType)(\"Expression\"),\n    typeAnnotation: (0, _utils.validateType)(\"TSType\")\n  }\n});\ndefineType(\"TSTypeAssertion\", {\n  aliases: [\"Expression\"],\n  visitor: [\"typeAnnotation\", \"expression\"],\n  fields: {\n    typeAnnotation: (0, _utils.validateType)(\"TSType\"),\n    expression: (0, _utils.validateType)(\"Expression\")\n  }\n});\ndefineType(\"TSEnumDeclaration\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"members\"],\n  fields: {\n    declare: (0, _utils.validateOptional)(bool),\n    const: (0, _utils.validateOptional)(bool),\n    id: (0, _utils.validateType)(\"Identifier\"),\n    members: (0, _utils.validateArrayOfType)(\"TSEnumMember\"),\n    initializer: (0, _utils.validateOptionalType)(\"Expression\")\n  }\n});\ndefineType(\"TSEnumMember\", {\n  visitor: [\"id\", \"initializer\"],\n  fields: {\n    id: (0, _utils.validateType)([\"Identifier\", \"StringLiteral\"]),\n    initializer: (0, _utils.validateOptionalType)(\"Expression\")\n  }\n});\ndefineType(\"TSModuleDeclaration\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"body\"],\n  fields: {\n    declare: (0, _utils.validateOptional)(bool),\n    global: (0, _utils.validateOptional)(bool),\n    id: (0, _utils.validateType)([\"Identifier\", \"StringLiteral\"]),\n    body: (0, _utils.validateType)([\"TSModuleBlock\", \"TSModuleDeclaration\"])\n  }\n});\ndefineType(\"TSModuleBlock\", {\n  aliases: [\"Scopable\", \"Block\", \"BlockParent\"],\n  visitor: [\"body\"],\n  fields: {\n    body: (0, _utils.validateArrayOfType)(\"Statement\")\n  }\n});\ndefineType(\"TSImportType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"argument\", \"qualifier\", \"typeParameters\"],\n  fields: {\n    argument: (0, _utils.validateType)(\"StringLiteral\"),\n    qualifier: (0, _utils.validateOptionalType)(\"TSEntityName\"),\n    typeParameters: (0, _utils.validateOptionalType)(\"TSTypeParameterInstantiation\")\n  }\n});\ndefineType(\"TSImportEqualsDeclaration\", {\n  aliases: [\"Statement\"],\n  visitor: [\"id\", \"moduleReference\"],\n  fields: {\n    isExport: (0, _utils.validate)(bool),\n    id: (0, _utils.validateType)(\"Identifier\"),\n    moduleReference: (0, _utils.validateType)([\"TSEntityName\", \"TSExternalModuleReference\"]),\n    importKind: {\n      validate: (0, _utils.assertOneOf)(\"type\", \"value\"),\n      optional: true\n    }\n  }\n});\ndefineType(\"TSExternalModuleReference\", {\n  visitor: [\"expression\"],\n  fields: {\n    expression: (0, _utils.validateType)(\"StringLiteral\")\n  }\n});\ndefineType(\"TSNonNullExpression\", {\n  aliases: [\"Expression\"],\n  visitor: [\"expression\"],\n  fields: {\n    expression: (0, _utils.validateType)(\"Expression\")\n  }\n});\ndefineType(\"TSExportAssignment\", {\n  aliases: [\"Statement\"],\n  visitor: [\"expression\"],\n  fields: {\n    expression: (0, _utils.validateType)(\"Expression\")\n  }\n});\ndefineType(\"TSNamespaceExportDeclaration\", {\n  aliases: [\"Statement\"],\n  visitor: [\"id\"],\n  fields: {\n    id: (0, _utils.validateType)(\"Identifier\")\n  }\n});\ndefineType(\"TSTypeAnnotation\", {\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: {\n      validate: (0, _utils.assertNodeType)(\"TSType\")\n    }\n  }\n});\ndefineType(\"TSTypeParameterInstantiation\", {\n  visitor: [\"params\"],\n  fields: {\n    params: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"TSType\")))\n    }\n  }\n});\ndefineType(\"TSTypeParameterDeclaration\", {\n  visitor: [\"params\"],\n  fields: {\n    params: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"TSTypeParameter\")))\n    }\n  }\n});\ndefineType(\"TSTypeParameter\", {\n  builder: [\"constraint\", \"default\", \"name\"],\n  visitor: [\"constraint\", \"default\"],\n  fields: {\n    name: {\n      validate: (0, _utils.assertValueType)(\"string\")\n    },\n    constraint: {\n      validate: (0, _utils.assertNodeType)(\"TSType\"),\n      optional: true\n    },\n    default: {\n      validate: (0, _utils.assertNodeType)(\"TSType\"),\n      optional: true\n    }\n  }\n});","map":{"version":3,"sources":["/development/workspace/internal/ui/myreact-kafka/node_modules/@babel/types/lib/definitions/typescript.js"],"names":["_utils","require","_core","_is","defineType","defineAliasedType","bool","assertValueType","tSFunctionTypeAnnotationCommon","returnType","validate","assertNodeType","optional","typeParameters","aliases","visitor","fields","accessibility","assertOneOf","readonly","parameter","override","decorators","chain","assertEach","Object","assign","functionDeclarationCommon","classMethodOrDeclareMethodCommon","left","validateType","right","signatureDeclarationCommon","validateOptionalType","validateArrayOfType","callConstructSignatureDeclaration","namedTypeElementCommon","key","computed","validateOptional","typeAnnotation","initializer","kind","static","parameters","tsKeywordTypes","type","fnOrCtrBase","abstract","typeName","builder","parameterName","asserts","exprName","members","elementType","elementTypes","label","default","unionOrIntersection","types","checkType","extendsType","trueType","falseType","typeParameter","operator","objectType","indexType","nameType","literal","unaryExpression","unaryOperator","validator","parent","node","argument","oneOfNodeTypes","expression","declare","id","extends","arrayOfType","body","const","global","qualifier","isExport","moduleReference","importKind","params","name","constraint"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _utils = require(\"./utils\");\n\nvar _core = require(\"./core\");\n\nvar _is = require(\"../validators/is\");\n\nconst defineType = (0, _utils.defineAliasedType)(\"TypeScript\");\nconst bool = (0, _utils.assertValueType)(\"boolean\");\nconst tSFunctionTypeAnnotationCommon = {\n  returnType: {\n    validate: (0, _utils.assertNodeType)(\"TSTypeAnnotation\", \"Noop\"),\n    optional: true\n  },\n  typeParameters: {\n    validate: (0, _utils.assertNodeType)(\"TSTypeParameterDeclaration\", \"Noop\"),\n    optional: true\n  }\n};\ndefineType(\"TSParameterProperty\", {\n  aliases: [\"LVal\"],\n  visitor: [\"parameter\"],\n  fields: {\n    accessibility: {\n      validate: (0, _utils.assertOneOf)(\"public\", \"private\", \"protected\"),\n      optional: true\n    },\n    readonly: {\n      validate: (0, _utils.assertValueType)(\"boolean\"),\n      optional: true\n    },\n    parameter: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\", \"AssignmentPattern\")\n    },\n    override: {\n      validate: (0, _utils.assertValueType)(\"boolean\"),\n      optional: true\n    },\n    decorators: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"Decorator\"))),\n      optional: true\n    }\n  }\n});\ndefineType(\"TSDeclareFunction\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"typeParameters\", \"params\", \"returnType\"],\n  fields: Object.assign({}, _core.functionDeclarationCommon, tSFunctionTypeAnnotationCommon)\n});\ndefineType(\"TSDeclareMethod\", {\n  visitor: [\"decorators\", \"key\", \"typeParameters\", \"params\", \"returnType\"],\n  fields: Object.assign({}, _core.classMethodOrDeclareMethodCommon, tSFunctionTypeAnnotationCommon)\n});\ndefineType(\"TSQualifiedName\", {\n  aliases: [\"TSEntityName\"],\n  visitor: [\"left\", \"right\"],\n  fields: {\n    left: (0, _utils.validateType)(\"TSEntityName\"),\n    right: (0, _utils.validateType)(\"Identifier\")\n  }\n});\nconst signatureDeclarationCommon = {\n  typeParameters: (0, _utils.validateOptionalType)(\"TSTypeParameterDeclaration\"),\n  [\"parameters\"]: (0, _utils.validateArrayOfType)([\"Identifier\", \"RestElement\"]),\n  [\"typeAnnotation\"]: (0, _utils.validateOptionalType)(\"TSTypeAnnotation\")\n};\nconst callConstructSignatureDeclaration = {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\"typeParameters\", \"parameters\", \"typeAnnotation\"],\n  fields: signatureDeclarationCommon\n};\ndefineType(\"TSCallSignatureDeclaration\", callConstructSignatureDeclaration);\ndefineType(\"TSConstructSignatureDeclaration\", callConstructSignatureDeclaration);\nconst namedTypeElementCommon = {\n  key: (0, _utils.validateType)(\"Expression\"),\n  computed: (0, _utils.validate)(bool),\n  optional: (0, _utils.validateOptional)(bool)\n};\ndefineType(\"TSPropertySignature\", {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\"key\", \"typeAnnotation\", \"initializer\"],\n  fields: Object.assign({}, namedTypeElementCommon, {\n    readonly: (0, _utils.validateOptional)(bool),\n    typeAnnotation: (0, _utils.validateOptionalType)(\"TSTypeAnnotation\"),\n    initializer: (0, _utils.validateOptionalType)(\"Expression\"),\n    kind: {\n      validate: (0, _utils.assertOneOf)(\"get\", \"set\")\n    }\n  })\n});\ndefineType(\"TSMethodSignature\", {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\"key\", \"typeParameters\", \"parameters\", \"typeAnnotation\"],\n  fields: Object.assign({}, signatureDeclarationCommon, namedTypeElementCommon, {\n    kind: {\n      validate: (0, _utils.assertOneOf)(\"method\", \"get\", \"set\")\n    }\n  })\n});\ndefineType(\"TSIndexSignature\", {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\"parameters\", \"typeAnnotation\"],\n  fields: {\n    readonly: (0, _utils.validateOptional)(bool),\n    static: (0, _utils.validateOptional)(bool),\n    parameters: (0, _utils.validateArrayOfType)(\"Identifier\"),\n    typeAnnotation: (0, _utils.validateOptionalType)(\"TSTypeAnnotation\")\n  }\n});\nconst tsKeywordTypes = [\"TSAnyKeyword\", \"TSBooleanKeyword\", \"TSBigIntKeyword\", \"TSIntrinsicKeyword\", \"TSNeverKeyword\", \"TSNullKeyword\", \"TSNumberKeyword\", \"TSObjectKeyword\", \"TSStringKeyword\", \"TSSymbolKeyword\", \"TSUndefinedKeyword\", \"TSUnknownKeyword\", \"TSVoidKeyword\"];\n\nfor (const type of tsKeywordTypes) {\n  defineType(type, {\n    aliases: [\"TSType\", \"TSBaseType\"],\n    visitor: [],\n    fields: {}\n  });\n}\n\ndefineType(\"TSThisType\", {\n  aliases: [\"TSType\", \"TSBaseType\"],\n  visitor: [],\n  fields: {}\n});\nconst fnOrCtrBase = {\n  aliases: [\"TSType\"],\n  visitor: [\"typeParameters\", \"parameters\", \"typeAnnotation\"]\n};\ndefineType(\"TSFunctionType\", Object.assign({}, fnOrCtrBase, {\n  fields: signatureDeclarationCommon\n}));\ndefineType(\"TSConstructorType\", Object.assign({}, fnOrCtrBase, {\n  fields: Object.assign({}, signatureDeclarationCommon, {\n    abstract: (0, _utils.validateOptional)(bool)\n  })\n}));\ndefineType(\"TSTypeReference\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeName\", \"typeParameters\"],\n  fields: {\n    typeName: (0, _utils.validateType)(\"TSEntityName\"),\n    typeParameters: (0, _utils.validateOptionalType)(\"TSTypeParameterInstantiation\")\n  }\n});\ndefineType(\"TSTypePredicate\", {\n  aliases: [\"TSType\"],\n  visitor: [\"parameterName\", \"typeAnnotation\"],\n  builder: [\"parameterName\", \"typeAnnotation\", \"asserts\"],\n  fields: {\n    parameterName: (0, _utils.validateType)([\"Identifier\", \"TSThisType\"]),\n    typeAnnotation: (0, _utils.validateOptionalType)(\"TSTypeAnnotation\"),\n    asserts: (0, _utils.validateOptional)(bool)\n  }\n});\ndefineType(\"TSTypeQuery\", {\n  aliases: [\"TSType\"],\n  visitor: [\"exprName\"],\n  fields: {\n    exprName: (0, _utils.validateType)([\"TSEntityName\", \"TSImportType\"])\n  }\n});\ndefineType(\"TSTypeLiteral\", {\n  aliases: [\"TSType\"],\n  visitor: [\"members\"],\n  fields: {\n    members: (0, _utils.validateArrayOfType)(\"TSTypeElement\")\n  }\n});\ndefineType(\"TSArrayType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"elementType\"],\n  fields: {\n    elementType: (0, _utils.validateType)(\"TSType\")\n  }\n});\ndefineType(\"TSTupleType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"elementTypes\"],\n  fields: {\n    elementTypes: (0, _utils.validateArrayOfType)([\"TSType\", \"TSNamedTupleMember\"])\n  }\n});\ndefineType(\"TSOptionalType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: (0, _utils.validateType)(\"TSType\")\n  }\n});\ndefineType(\"TSRestType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: (0, _utils.validateType)(\"TSType\")\n  }\n});\ndefineType(\"TSNamedTupleMember\", {\n  visitor: [\"label\", \"elementType\"],\n  builder: [\"label\", \"elementType\", \"optional\"],\n  fields: {\n    label: (0, _utils.validateType)(\"Identifier\"),\n    optional: {\n      validate: bool,\n      default: false\n    },\n    elementType: (0, _utils.validateType)(\"TSType\")\n  }\n});\nconst unionOrIntersection = {\n  aliases: [\"TSType\"],\n  visitor: [\"types\"],\n  fields: {\n    types: (0, _utils.validateArrayOfType)(\"TSType\")\n  }\n};\ndefineType(\"TSUnionType\", unionOrIntersection);\ndefineType(\"TSIntersectionType\", unionOrIntersection);\ndefineType(\"TSConditionalType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"checkType\", \"extendsType\", \"trueType\", \"falseType\"],\n  fields: {\n    checkType: (0, _utils.validateType)(\"TSType\"),\n    extendsType: (0, _utils.validateType)(\"TSType\"),\n    trueType: (0, _utils.validateType)(\"TSType\"),\n    falseType: (0, _utils.validateType)(\"TSType\")\n  }\n});\ndefineType(\"TSInferType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeParameter\"],\n  fields: {\n    typeParameter: (0, _utils.validateType)(\"TSTypeParameter\")\n  }\n});\ndefineType(\"TSParenthesizedType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: (0, _utils.validateType)(\"TSType\")\n  }\n});\ndefineType(\"TSTypeOperator\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    operator: (0, _utils.validate)((0, _utils.assertValueType)(\"string\")),\n    typeAnnotation: (0, _utils.validateType)(\"TSType\")\n  }\n});\ndefineType(\"TSIndexedAccessType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"objectType\", \"indexType\"],\n  fields: {\n    objectType: (0, _utils.validateType)(\"TSType\"),\n    indexType: (0, _utils.validateType)(\"TSType\")\n  }\n});\ndefineType(\"TSMappedType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeParameter\", \"typeAnnotation\", \"nameType\"],\n  fields: {\n    readonly: (0, _utils.validateOptional)(bool),\n    typeParameter: (0, _utils.validateType)(\"TSTypeParameter\"),\n    optional: (0, _utils.validateOptional)(bool),\n    typeAnnotation: (0, _utils.validateOptionalType)(\"TSType\"),\n    nameType: (0, _utils.validateOptionalType)(\"TSType\")\n  }\n});\ndefineType(\"TSLiteralType\", {\n  aliases: [\"TSType\", \"TSBaseType\"],\n  visitor: [\"literal\"],\n  fields: {\n    literal: {\n      validate: function () {\n        const unaryExpression = (0, _utils.assertNodeType)(\"NumericLiteral\", \"BigIntLiteral\");\n        const unaryOperator = (0, _utils.assertOneOf)(\"-\");\n        const literal = (0, _utils.assertNodeType)(\"NumericLiteral\", \"StringLiteral\", \"BooleanLiteral\", \"BigIntLiteral\");\n\n        function validator(parent, key, node) {\n          if ((0, _is.default)(\"UnaryExpression\", node)) {\n            unaryOperator(node, \"operator\", node.operator);\n            unaryExpression(node, \"argument\", node.argument);\n          } else {\n            literal(parent, key, node);\n          }\n        }\n\n        validator.oneOfNodeTypes = [\"NumericLiteral\", \"StringLiteral\", \"BooleanLiteral\", \"BigIntLiteral\", \"UnaryExpression\"];\n        return validator;\n      }()\n    }\n  }\n});\ndefineType(\"TSExpressionWithTypeArguments\", {\n  aliases: [\"TSType\"],\n  visitor: [\"expression\", \"typeParameters\"],\n  fields: {\n    expression: (0, _utils.validateType)(\"TSEntityName\"),\n    typeParameters: (0, _utils.validateOptionalType)(\"TSTypeParameterInstantiation\")\n  }\n});\ndefineType(\"TSInterfaceDeclaration\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"typeParameters\", \"extends\", \"body\"],\n  fields: {\n    declare: (0, _utils.validateOptional)(bool),\n    id: (0, _utils.validateType)(\"Identifier\"),\n    typeParameters: (0, _utils.validateOptionalType)(\"TSTypeParameterDeclaration\"),\n    extends: (0, _utils.validateOptional)((0, _utils.arrayOfType)(\"TSExpressionWithTypeArguments\")),\n    body: (0, _utils.validateType)(\"TSInterfaceBody\")\n  }\n});\ndefineType(\"TSInterfaceBody\", {\n  visitor: [\"body\"],\n  fields: {\n    body: (0, _utils.validateArrayOfType)(\"TSTypeElement\")\n  }\n});\ndefineType(\"TSTypeAliasDeclaration\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"typeParameters\", \"typeAnnotation\"],\n  fields: {\n    declare: (0, _utils.validateOptional)(bool),\n    id: (0, _utils.validateType)(\"Identifier\"),\n    typeParameters: (0, _utils.validateOptionalType)(\"TSTypeParameterDeclaration\"),\n    typeAnnotation: (0, _utils.validateType)(\"TSType\")\n  }\n});\ndefineType(\"TSAsExpression\", {\n  aliases: [\"Expression\"],\n  visitor: [\"expression\", \"typeAnnotation\"],\n  fields: {\n    expression: (0, _utils.validateType)(\"Expression\"),\n    typeAnnotation: (0, _utils.validateType)(\"TSType\")\n  }\n});\ndefineType(\"TSTypeAssertion\", {\n  aliases: [\"Expression\"],\n  visitor: [\"typeAnnotation\", \"expression\"],\n  fields: {\n    typeAnnotation: (0, _utils.validateType)(\"TSType\"),\n    expression: (0, _utils.validateType)(\"Expression\")\n  }\n});\ndefineType(\"TSEnumDeclaration\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"members\"],\n  fields: {\n    declare: (0, _utils.validateOptional)(bool),\n    const: (0, _utils.validateOptional)(bool),\n    id: (0, _utils.validateType)(\"Identifier\"),\n    members: (0, _utils.validateArrayOfType)(\"TSEnumMember\"),\n    initializer: (0, _utils.validateOptionalType)(\"Expression\")\n  }\n});\ndefineType(\"TSEnumMember\", {\n  visitor: [\"id\", \"initializer\"],\n  fields: {\n    id: (0, _utils.validateType)([\"Identifier\", \"StringLiteral\"]),\n    initializer: (0, _utils.validateOptionalType)(\"Expression\")\n  }\n});\ndefineType(\"TSModuleDeclaration\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"body\"],\n  fields: {\n    declare: (0, _utils.validateOptional)(bool),\n    global: (0, _utils.validateOptional)(bool),\n    id: (0, _utils.validateType)([\"Identifier\", \"StringLiteral\"]),\n    body: (0, _utils.validateType)([\"TSModuleBlock\", \"TSModuleDeclaration\"])\n  }\n});\ndefineType(\"TSModuleBlock\", {\n  aliases: [\"Scopable\", \"Block\", \"BlockParent\"],\n  visitor: [\"body\"],\n  fields: {\n    body: (0, _utils.validateArrayOfType)(\"Statement\")\n  }\n});\ndefineType(\"TSImportType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"argument\", \"qualifier\", \"typeParameters\"],\n  fields: {\n    argument: (0, _utils.validateType)(\"StringLiteral\"),\n    qualifier: (0, _utils.validateOptionalType)(\"TSEntityName\"),\n    typeParameters: (0, _utils.validateOptionalType)(\"TSTypeParameterInstantiation\")\n  }\n});\ndefineType(\"TSImportEqualsDeclaration\", {\n  aliases: [\"Statement\"],\n  visitor: [\"id\", \"moduleReference\"],\n  fields: {\n    isExport: (0, _utils.validate)(bool),\n    id: (0, _utils.validateType)(\"Identifier\"),\n    moduleReference: (0, _utils.validateType)([\"TSEntityName\", \"TSExternalModuleReference\"]),\n    importKind: {\n      validate: (0, _utils.assertOneOf)(\"type\", \"value\"),\n      optional: true\n    }\n  }\n});\ndefineType(\"TSExternalModuleReference\", {\n  visitor: [\"expression\"],\n  fields: {\n    expression: (0, _utils.validateType)(\"StringLiteral\")\n  }\n});\ndefineType(\"TSNonNullExpression\", {\n  aliases: [\"Expression\"],\n  visitor: [\"expression\"],\n  fields: {\n    expression: (0, _utils.validateType)(\"Expression\")\n  }\n});\ndefineType(\"TSExportAssignment\", {\n  aliases: [\"Statement\"],\n  visitor: [\"expression\"],\n  fields: {\n    expression: (0, _utils.validateType)(\"Expression\")\n  }\n});\ndefineType(\"TSNamespaceExportDeclaration\", {\n  aliases: [\"Statement\"],\n  visitor: [\"id\"],\n  fields: {\n    id: (0, _utils.validateType)(\"Identifier\")\n  }\n});\ndefineType(\"TSTypeAnnotation\", {\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: {\n      validate: (0, _utils.assertNodeType)(\"TSType\")\n    }\n  }\n});\ndefineType(\"TSTypeParameterInstantiation\", {\n  visitor: [\"params\"],\n  fields: {\n    params: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"TSType\")))\n    }\n  }\n});\ndefineType(\"TSTypeParameterDeclaration\", {\n  visitor: [\"params\"],\n  fields: {\n    params: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"TSTypeParameter\")))\n    }\n  }\n});\ndefineType(\"TSTypeParameter\", {\n  builder: [\"constraint\", \"default\", \"name\"],\n  visitor: [\"constraint\", \"default\"],\n  fields: {\n    name: {\n      validate: (0, _utils.assertValueType)(\"string\")\n    },\n    constraint: {\n      validate: (0, _utils.assertNodeType)(\"TSType\"),\n      optional: true\n    },\n    default: {\n      validate: (0, _utils.assertNodeType)(\"TSType\"),\n      optional: true\n    }\n  }\n});"]},"metadata":{},"sourceType":"script"}